{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/ApplicationForm.jsx","components/Register.jsx","components/protected-route.jsx","components/admin-route.jsx","components/Login.jsx","components/Adminastrative/CreateCourse.jsx","components/Adminastrative/AuthorizedList.jsx","components/Adminastrative/WaitingList.jsx","components/Adminastrative/EnrollDetail.jsx","components/Adminastrative/ModifyCourse.jsx","components/Adminastrative/CourseDetail.jsx","components/Adminastrative/Admin.jsx","components/RegisterWaitinglistRecord.jsx","components/RegisterRecordDetail.jsx","components/RegisterRecord.jsx","components/App.jsx","index.js"],"names":["Header","useState","isLoggedOut","setLoggedOut","console","log","Navbar","bg","variant","Brand","href","Nav","className","Link","Button","onClick","alert","localStorage","clear","to","Footer","props","getItem","ApplicationForm","courseList","setCourseList","username","email","staffid","post","dept","course","newValue","setNewValue","isDataObtained","setIsDataObtained","fields","checkQuota","options","method","headers","body","qs","stringify","fetch","then","res","status","json","quota","clearInput","catch","err","waitinglist","_id","courseName","enroll","prevValue","handleChange","event","target","name","value","useEffect","length","src","Form","onSubmit","preventDefault","FormGroup","Label","Control","placeholder","size","onChange","required","InputGroup","type","Append","Text","as","map","date","Date","getDate","getMonth","getFullYear","role","Register","password","userData","setUserData","isRegistered","setRegister","Fragment","user","msg","setItem","token","Group","ProtectedRoute","Component","component","rest","render","AdminRoute","Login","setEmail","redirect","setRedirect","reLogin","setRelogin","CreateCourse","time","venue","tutor","description","newCourse","setNewCourse","isCreated","setIsCreated","cousreName","FormControl","aria-label","rows","AuthorizedList","setUsername","list","setList","isObtained","setIsObtained","clicked","isClicked","setisClicked","error","Card","Body","Table","item","index","WaitingList","courseID","isBack","setIsBack","records","setRecords","noResult","setNoResult","EnrollDetail","striped","bordered","hover","record","data","blob","Blob","url","window","URL","createObjectURL","a","document","createElement","setAttribute","append","click","removeChild","download","Parser","parse","enrollRecords","setEnrollRecords","setWaitingList","isLoad","setIsLoad","noRecord","setNoRecord","message","CourseDetail","selectedCourse","enrollment","handleDelete","withBOM","ModifyCourse","setCourse","setIsModified","parseDate","setParseDate","newDate","day","month","year","getCourseDetail","setGetCourseDetail","modify","setModify","location","reload","Title","toLocaleDateString","Admin","initialCourse","couseName","isAuthorized","authorized","isCreate","create","courses","setCourses","selectedID","setSelectedID","period","setPeriod","isLoaded","setIsLoaded","noCourse","setNoCourse","setAuthorized","setCreate","defaultActiveKey","onSelect","selectedKey","handleClick","eventKey","find","RegisterWaitinglistRecord","loaded","setLoaded","details","setDetails","setCourseID","RegisterRecordDetail","detail","waitingList","RegisterRecord","handleSidebarClick","App","exact","path","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.5e6b8538.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { Redirect } from \"react-router-dom\";\n\nfunction Header(){\n\n    const [isLoggedOut, setLoggedOut] = useState(\"false\");\n\n    console.log(\"rendering header\");\n\n\n    function handleLogout(){\n\n      \n        console.log(\"Logout now\");\n        alert(\"登出成功\");\n        localStorage.clear();\n        setLoggedOut(\"true\");\n           \n    }\n\n    return (\n\n    <Navbar bg=\"primary\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">靈實員工培訓課程報名系統</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/register-record\">報名記錄</Nav.Link>\n        </Nav>\n        <Button variant=\"outline-light\" onClick={handleLogout}>登出</Button>\n\n        { isLoggedOut === \"true\" && <Redirect to=\"/login\" /> }\n    </Navbar>\n    \n    );\n\n}\n\nexport default Header;\n\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nfunction Footer(props){\n\n    return <footer>\n        {localStorage.getItem('role') === 'admin' && <Link to=\"/admin\" className=\"adminLink\">管理員模式</Link> }\n    </footer>;\n}\n\nexport default Footer; ","import React, {useState, useEffect} from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport qs from 'qs';\n\nfunction ApplicationForm(){\n\n\n    const [courseList, setCourseList] = useState([{}]);\n\n    const [newValue, setNewValue] = useState({\n        username: \"\",\n        email: \"\",\n        staffid: \"\",\n        post: \"\",\n        dept: \"\",\n        course: \"\",\n    });\n    \n    const [isDataObtained, setIsDataObtained] = useState(false);\n   \n\n    const fields = [\"姓名\", \"電郵\", \"職員編號\", \"職位\", \"單位\", \"報讀課程\"];\n    var role = \"\";\n\n    useEffect( () => {\n\n        if(!isDataObtained){\n\n            const futureCourseURL = \"/futureCourse\";\n            const futureCourseOptions = {\n                method: \"GET\",\n                headers: {\n                  \"Accept\": \"application/json\",\n                }\n            };\n\n            fetch(futureCourseURL, futureCourseOptions)\n            .then(res => res.json())\n            .then(res => {\n                if(res.length > 0){\n                        setCourseList(res);\n                        setNewValue(prevValue => {\n                        \n                            return{\n                                ...prevValue,\n                                course: res[0]\n                            }\n                        })\n                    }\n                console.log(newValue.course);\n                setIsDataObtained(true);\n            }).catch(err => {\n                console.log(\"futureCourse: \" + err);\n            });\n\n        }\n\n        \n    })\n\n    function enroll(course){\n\n        const url = \"/enroll\";\n        const options = {\n            method: \"POST\",\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: qs.stringify({\n                \"courseID\": course._id, \n                \"enrollment\": newValue,\n                \"courseName\": course.courseName,\n                \"registeredBy\": localStorage.getItem(\"email\")\n            })\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                alert(\"成功報讀課程\");\n                clearInput();\n            }else{\n                alert(\"未能成功報讀課程, 請稍後再嘗試\");\n            }\n        }).catch(err => {\n            console.log(\"enroll: \" + err);\n        });\n    }\n\n    function waitinglist(){\n\n        const url = \"/waitinglist\";\n        const options = {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: qs.stringify({\n                \"enrollment\": newValue,\n                \"registeredBy\": localStorage.getItem(\"email\")\n            })\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                alert(\"課程名額暫滿，你將會加進後備名單。如最後能夠成功報讀，屆時將會以公司電郵通知\");\n                clearInput();\n            }else{\n                alert(\"發生錯誤，請稍後再嘗試\");\n            }\n        }).catch(err => {\n            console.log(\"waitinglist: \" + err);\n        });\n    }\n\n\n    function checkQuota(){\n\n        if(newValue.email !== \"\"){\n\n            console.log(\"CourseID: \" + newValue.course);\n            const url = \"/checkQuota\";\n            const options = {\n                method: \"POST\",\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/x-www-form-urlencoded\"\n                },\n                body: qs.stringify({\n                    \"courseID\": newValue.course\n                })\n            };\n\n            fetch(url, options)\n            .then(res => {\n                if(res.status === 200){\n                    return res.json()\n                }else{\n                    alert(\"發生錯誤，請稍後再嘗試\");\n                    return \"error\";\n                }\n            })\n            .then(res => {\n                console.log(res);\n                if(res.quota === 0){\n                    waitinglist();\n                }else if(res !== \"error\"){\n                    enroll(res);\n                }\n            }).catch(err => {\n                console.log(\"Login: \" + err);\n            });\n        }else{\n            alert(\"請輸入有效資料\");\n        }\n    }\n\n\n    function handleSubmit(event){\n\n        event.preventDefault();\n        checkQuota();\n        //enroll();\n    }\n\n    function clearInput(){\n\n        setNewValue(prevValue => {\n                    \n            return {\n                ...prevValue,\n                username: \"\",\n                email: \"\",\n                staffid: \"\",\n                post: \"\",\n                dept: \"\"\n            }\n\n        });\n\n    }\n\n\n    function handleChange(event){\n\n        const {name, value} = event.target;\n\n        console.log(value);\n\n        setNewValue(prevValue => {\n            return{\n                ...prevValue,\n                [name]: value\n            }; \n        });\n\n    }\n\n    return (\n        <div>\n    <Header />\n    <img src=\"https://www.hohcs.org.hk/App/Modules/Admin/Tpl/Static/upload/image/20170418/20170418125117_21846.png\" className=\"formIcon\"/>\n\n    <p className=\"reminderText\">如替其他同事報名，請填上同事資料</p>\n    <p className=\"reminderText\">於提交名單前須先取得主管批淮</p>\n\n    \n    <Form className=\"inputForm\" onSubmit={handleSubmit}>\n    \n        <div className=\"inputRow\">\n            <div className=\"inputItem\">\n                <FormGroup>\n                    <Form.Label className=\"inputLabel\">英文名稱:</Form.Label>\n                    <Form.Control placeholder={fields[0]} size=\"lg\" onChange={handleChange} value={newValue.username} name=\"username\" required></Form.Control>\n                </FormGroup>\n            </div>\n\n            <div className=\"inputItem\"></div>\n\n            <div className=\"inputItem\">\n                <FormGroup className=\"inputItem\">\n                    <Form.Label className=\"inputLabel\">電郵:</Form.Label>\n                    <InputGroup>\n                        <Form.Control placeholder={fields[1]} size=\"lg\" name=\"email\" type=\"text\" onChange={handleChange} value={newValue.email} className=\"input\" required></Form.Control>\n                        <InputGroup.Append>\n                            <InputGroup.Text>@hohsc.org.hk</InputGroup.Text>\n                        </InputGroup.Append>\n                    </InputGroup> \n                </FormGroup>\n            </div>\n        </div>\n            \n        <div className=\"inputRow\">\n\n            <div className=\"inputItem\">\n\n                <FormGroup>\n                    <Form.Label className=\"inputLabel\">職員編號:</Form.Label>\n                    <Form.Control placeholder={fields[2]} size=\"lg\" onChange={handleChange} value={newValue.staffid} name=\"staffid\" required></Form.Control>\n                </FormGroup>\n            </div>\n\n            <div className=\"inputItem\"></div>\n\n            <div className=\"inputItem\">\n                <FormGroup>\n                    <Form.Label className=\"inputLabel\">職位:</Form.Label>\n                    <Form.Control placeholder={fields[3]} size=\"lg\" onChange={handleChange} value={newValue.post} name=\"post\" required></Form.Control>\n                </FormGroup>\n            </div>\n\n        </div>\n            \n\n        <div className=\"inputRow\">\n\n            <div className=\"inputItem\">\n                <FormGroup>\n                    <Form.Label className=\"inputLabel\">單位:</Form.Label>\n                    <Form.Control placeholder={fields[4]} size=\"lg\" onChange={handleChange} value={newValue.dept} name=\"dept\" required></Form.Control>\n                </FormGroup>\n            </div>\n\n            <div className=\"inputItem\"></div>\n\n            <div className=\"inputItem\">\n                <FormGroup>\n                    <Form.Label className=\"inputLabel\">報讀課程:</Form.Label>\n                    <Form.Control size=\"lg\" onChange={handleChange} name=\"course\" as=\"select\" className=\"courseSelection\" required>\n                        <option>請選擇課程</option>\n                        {courseList.length > 0 && courseList.map(course => {\n                            var date = new Date(course.date);\n                        return <option value={course._id}>{course.courseName} {date.getDate()}/{date.getMonth()+1}/{date.getFullYear()}</option>\n                        })}\n                    </Form.Control>\n                </FormGroup>\n            </div>\n\n        </div>\n\n        <div className=\"btnWrapper\">\n            <Button variant=\"primary\" size=\"lg\" type=\"submit\" className=\"submitBtn\">提交</Button>\n\n            <Button variant=\"danger\" size=\"lg\" onClick={clearInput} className=\"clearBtn\">清除所有資料</Button>\n        </div>\n\n    </Form>\n    <Footer role={role}/>\n    </div>\n    );\n}\n\nexport default ApplicationForm;","import React, {useState} from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport { Redirect } from 'react-router-dom';\nimport qs from 'qs';\n\nexport default function Register(){\n\n    const [userData, setUserData] = useState({\n\n        username: \"\",\n        password: \"\",\n        staffid: \"\",\n        name: \"\",\n        post: \"\",\n        dept: \"\"\n\n    });\n\n    const [isRegistered, setRegister] = useState(false)\n\n    function handleChange(event){\n\n        const {name, value} = event.target;\n        \n        setUserData(prevValue => {\n            return{\n                ...prevValue,\n                [name]: value\n            }; \n        });\n        \n    }\n\n    function handleRegister(event){\n\n        event.preventDefault();\n\n        const user = {\n            username: userData.username,\n            password: userData.password,\n            staffid: userData.staffid,\n            name: userData.name,\n            post: userData.post,\n            dept: userData.dept\n        };\n\n        const url = '/register';\n        const options = {\n            method: 'POST',\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: qs.stringify(user)\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                return res.json();\n            }else{\n                return \"error\";\n            }\n        })\n        .then(res => {\n            if(res !== \"error\"){\n                if(res.msg === \"Not Authorized\"){\n                    alert(\"你的電郵並未獲得授權，因此不能註冊\");\n                }else{\n                    localStorage.setItem('userToken', res.token);\n                    localStorage.setItem('isAuthorized', true);\n                    localStorage.setItem('username', res.user.username);\n                    setRegister(true);\n                }\n            }else{\n                alert(\"未能成功註冊，請再嘗試\");\n                setUserData({\n                    username: \"\",\n                    password: \"\",\n                    staffid: \"\",\n                    name: \"\",\n                    post: \"\",\n                    dept: \"\"\n                })\n            }\n            \n        })\n    }\n\n    return (\n        <React.Fragment>\n\n            <img src=\"https://www.hohcs.org.hk/App/Modules/Admin/Tpl/Static/upload/image/20170418/20170418125117_21846.png\" className=\"icon-register\"/>\n\n                <Form onSubmit={handleRegister}>\n\n                            <Form.Group className=\"inputGroup\">\n                                <Form.Label className=\"inputLabel\">電郵:</Form.Label>\n                                <InputGroup>\n                                    <Form.Control placeholder=\"請輸入電郵\" className=\"input\" name=\"username\" onChange={handleChange} value={userData.username}></Form.Control>\n                                    <InputGroup.Append>\n                                        <InputGroup.Text>@hohsc.org.hk</InputGroup.Text>\n                                    </InputGroup.Append>\n                                </InputGroup> \n                            </Form.Group>\n\n\n                            <Form.Group className=\"inputGroup\">\n                                <Form.Label className=\"inputLabel\">密碼:</Form.Label>\n                                <Form.Control placeholder=\"請輸入密碼\" onChange={handleChange} name=\"password\" value={userData.password} type=\"password\" className=\"input\"></Form.Control>\n                            </Form.Group>\n\n\n\n                            <Form.Group className=\"inputGroup\">\n                                <Form.Label className=\"inputLabel\">姓名:</Form.Label>\n                                <Form.Control placeholder=\"請輸入姓名\" onChange={handleChange} name=\"name\" value={userData.name} type=\"text\" className=\"input\"></Form.Control>\n                            </Form.Group>\n\n\n                            <Form.Group className=\"inputGroup\">\n                                <Form.Label className=\"inputLabel\"> 單位:</Form.Label>\n                                <Form.Control placeholder=\"請輸入單位\" onChange={handleChange} name=\"dept\" value={userData.dept} type=\"text\" className=\"input\"></Form.Control>\n                            </Form.Group>\n\n                            <Form.Group className=\"inputGroup\">\n                                <Form.Label className=\"inputLabel\"> 職位:</Form.Label>\n                                <Form.Control placeholder=\"請輸入職位\" onChange={handleChange} name=\"post\" value={userData.post} type=\"text\" className=\"input\"></Form.Control>\n                            </Form.Group>\n\n\n                            <Form.Group className=\"inputGroup\">\n                                <Form.Label className=\"inputLabel\"> 職員編號:</Form.Label>\n                                <Form.Control placeholder=\"請輸入職員編號\" onChange={handleChange} name=\"staffid\" value={userData.staffid} type=\"text\" className=\"input\"></Form.Control>\n                            </Form.Group>\n\n                        <Button variant=\"primary\" size=\"lg\" className=\"registerBtn\" type=\"submit\">註冊</Button>\n\n                { isRegistered && <Redirect to=\"/\" /> }\n                </Form>\n\n        </React.Fragment>\n    );\n}","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport const ProtectedRoute = ({component: Component, ...rest}) => {\n\n    return (\n        <Route {...rest} render={\n            (props) => {\n                if(localStorage.getItem('email')){\n                    return <Component {...props}/>;\n                }else{\n                    return <Redirect to=\"/login\" />;\n                }\n            }\n        }>\n\n        </Route>\n    );\n}","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport const AdminRoute = ({component: Component, ...rest}) => {\n\n    return (\n        <Route {...rest} render={\n            (props) => {\n                if(localStorage.getItem('role') === 'admin'){\n                    return <Component {...props}/>;\n                }else{\n                    return <Redirect to=\"/\" />;\n                }\n            }\n        }>\n\n        </Route>\n    );\n}","import React, { useState } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport { Redirect } from 'react-router-dom';\nimport qs from 'qs';\n\nfunction Login() {\n\n    const [email, setEmail] = useState(\"\");\n\n    const [redirect, setRedirect] = useState(false);\n\n    const [reLogin, setRelogin] = useState(false);\n\n    function handleChange(event){\n\n        const {value} = event.target;\n\n        setEmail(value);\n\n    }\n\n    function handleSubmit(event){\n\n        event.preventDefault();\n\n        const url = '/login';\n        const options = {\n            method: 'POST',\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: qs.stringify({\n                email: email\n            })\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                return res.json();\n            }else{\n                return \"error\";\n            }\n        })\n        .then(res => {\n            if(res !== \"error\"){\n                console.log(\"login\");\n                localStorage.setItem('email', res.email);\n                localStorage.setItem('role', res.role);\n                setRedirect(true);\n            }else{\n                setRelogin(true);\n            }\n        })\n        \n    }\n\n    if(redirect){\n        return <Redirect to=\"/\" />\n    }\n\n    if(reLogin){\n        \n    }\n\n    return(\n        <React.Fragment>\n        <img src=\"https://www.hohcs.org.hk/App/Modules/Admin/Tpl/Static/upload/image/20170418/20170418125117_21846.png\" className=\"icon\"/>\n\n        <p className=\"subtitle\">靈實培訓課程報名系統</p>\n\n        { reLogin && <p className=\"loginError\">登入電郵錯誤，請重新輸入</p> }\n    \n    {/* onSubmit={handleSubmit} */}\n        <Form onSubmit={handleSubmit} className=\"formInput\">\n            \n                    <InputGroup className=\"loginInput\">\n                        <Form.Control placeholder=\"電郵\" className=\"input\" name=\"username\" onChange={handleChange} value={email}></Form.Control>\n                        <InputGroup.Append>\n                            <InputGroup.Text className=\"emailText\">@hohsc.org.hk</InputGroup.Text>\n                        </InputGroup.Append>\n                    </InputGroup> \n            \n            {/* onClick={handleLogin} */}\n                <Button variant=\"primary\" size=\"lg\" className=\"loginBtn\" type=\"submit\">登入</Button>\n                \n                \n                \n        </Form>\n\n        </React.Fragment>\n    );\n\n}\n\nexport default Login;","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Redirect } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport qs from 'qs'\n\n\n\nexport default function CreateCourse(){\n\n    const[newCourse, setNewCourse] = useState({\n        courseName: \"\",\n        date: \"\",\n        time: \"\",\n        venue: \"\",\n        quota: 0,\n        tutor: \"\",\n        description: \"\"\n\n    })\n\n    const[isCreated, setIsCreated] = useState(false);\n\n    function handleChange(event){\n\n        const {name, value} = event.target;\n\n        setNewCourse(prevValue => {\n            return{\n                ...prevValue,\n                [name]: value\n            }\n        });\n\n    }\n\n    function handleCreate(event){\n        event.preventDefault();\n        \n        const url = '/createcourse';\n        const options = {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: qs.stringify(newCourse)\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res){\n                alert(\"成功新增課程\");\n                setIsCreated(true);\n            }\n        })\n\n    }\n\n    return (\n        <React.Fragment>\n\n        <div className=\"createCourse\">\n            <h1 className=\"createCourseTitle\">新增課程</h1>\n\n            <Form onSubmit={handleCreate}>\n\n                <div className=\"inputForm\">\n                    <div className=\"inputRow\">\n                        <Form.Group className=\"inputItem\">\n                            <Form.Label className=\"inputLabel\">課程名稱:</Form.Label>\n                            <Form.Control placeholder=\"請輸入課程名稱\" className=\"input\" name=\"courseName\" type=\"text\" onChange={handleChange} value={newCourse.cousreName}></Form.Control>\n                        </Form.Group>\n                        <div className=\"inputItem\"></div>\n                        <Form.Group className=\"inputItem\">\n                            <Form.Label className=\"inputLabel\">上課日期:</Form.Label>\n                            <Form.Control placeholder=\"請輸入上課日期\" className=\"input\" name=\"date\" type=\"date\" onChange={handleChange} value={newCourse.date}></Form.Control>\n                        </Form.Group>\n                    </div>\n\n\n                        <div className=\"inputRow\">\n                            <Form.Group className=\"inputItem\">\n                                <Form.Label className=\"inputLabel\">上課時間:</Form.Label>\n                                <Form.Control placeholder=\"請輸入上課時間\" className=\"input\" name=\"time\" type=\"time\" onChange={handleChange} value={newCourse.time}></Form.Control>\n                            </Form.Group>\n                            <div className=\"inputItem\"></div>\n                            <Form.Group className=\"inputItem\">\n                                <Form.Label className=\"inputLabel\">上課地點:</Form.Label>\n                                <Form.Control placeholder=\"請輸入上課地點\" className=\"input\" name=\"venue\" type=\"text\" onChange={handleChange} value={newCourse.venue}></Form.Control>\n                            </Form.Group>\n                        </div>\n\n                        <div className=\"inputRow\">\n                            <Form.Group className=\"inputItem\">\n                                <Form.Label className=\"inputLabel\">課程名額:</Form.Label>\n                                <Form.Control placeholder=\"請輸入課程名額\" className=\"input\" name=\"quota\" type=\"number\" onChange={handleChange} value={newCourse.quota}></Form.Control>\n                            </Form.Group>\n                            <div className=\"inputItem\"></div>\n                            <Form.Group className=\"inputItem\">\n                                <Form.Label className=\"inputLabel\">課程導師:</Form.Label>\n                                <Form.Control placeholder=\"請輸入課程導師\" className=\"input\" name=\"tutor\" type=\"text\" onChange={handleChange} value={newCourse.tutor}></Form.Control>\n                            </Form.Group>\n                        </div>\n                        <div className=\"inputRow\">\n                            <Form.Group className=\"inputItem\">\n                                <Form.Label className=\"inputLabel courseDescriptionText\">課程簡介:</Form.Label>\n                                <FormControl as=\"textarea\" aria-label=\"With textarea\" rows=\"4\" name=\"description\" onChange={handleChange} value={newCourse.description}/>\n                            </Form.Group>\n                        </div>\n                    <Button variant=\"primary\" size=\"lg\" className=\"createBtn\" type=\"submit\">新增課程</Button>\n\n                    { isCreated && <Redirect to=\"/admin\"/> }\n\n                </div>\n\n            </Form>\n        </div>\n    </React.Fragment>\n    );\n}","import React, {useState, useEffect} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport qs from 'qs';\n\nexport default function AuthorizedList() {\n\n    const [username, setUsername] = useState(\"\");\n    const [list, setList] = useState([]);\n    const [isObtained, setIsObtained] = useState(false);\n    const [isClicked, setisClicked] = useState({\n        clicked: false,\n        email: \"\"\n    });\n\n    useEffect(() => {\n        if(!isObtained){\n            const getURL = \"/get-authorized-list\";\n            const getOptions = {\n                method: \"GET\",\n                headers: {\n                  \"Accept\": \"application/json\",\n                }\n            };\n\n            fetch(getURL, getOptions)\n            .then(res => {\n                if(res.status === 200){\n                    return res.json();\n                }else{\n                    return \"error\";\n                }\n            })\n            .then(res => {\n                if(res !== \"error\"){\n                    console.log(res);\n                    setList(res);\n                    setIsObtained(true);\n                } \n            }).catch(error => {\n                console.log(error);\n            });\n        }\n\n        if(isClicked.clicked){\n\n            const url = \"/delete-authorized-list\";\n            const options = {\n                method: \"POST\",\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/x-www-form-urlencoded\"\n                },\n                body: qs.stringify({\n                    \"email\": isClicked.email\n                })\n            };\n\n            console.log(options.body);\n\n            fetch(url, options)\n            .then(res => {\n                if(res.status === 200){\n                    alert(\"成功從授權名單中移除此電郵\");\n                    setisClicked(false);\n                    setIsObtained(false);\n                }else{\n                    alert(\"未能從授權名單中移除此電郵\");\n                }\n            })\n\n        }\n\n    })\n\n\n    function handleChange(event){\n\n        const {value} = event.target;\n        \n        setUsername(value);\n    }\n\n    function handleSubmit(event){\n\n        event.preventDefault();\n\n        const url = \"/add-authorized-list\";\n        const options = {\n            method: \"POST\",\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: qs.stringify({\n                \"email\": username+\"@hohcs.org.hk\",\n                \"role\": \"user\"\n            })\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                alert(\"成功新增授權電郵\");\n                setUsername(\"\");\n                setIsObtained(false);\n\n            }else{\n                alert(\"發生錯誤，請稍後再嘗試\");\n            }\n        });\n\n    }\n\n    return (\n\n        <React.Fragment>\n            <Card className=\"authorizedCard\">\n\n                <Card.Header className=\"cardDetailWrapper\"><h1 className=\"authorizedTitle\">授權名單</h1></Card.Header>\n                <Card.Body>\n                    <Form className=\"authorizedForm\" onSubmit={handleSubmit}>\n                    <InputGroup>\n                        <Form.Control type=\"text\" className=\"input\" placeholder=\"輸入電郵\" name=\"username\" onChange={handleChange} value={username}></Form.Control>\n                        <InputGroup.Append>\n                            <InputGroup.Text>@hohsc.org.hk</InputGroup.Text>\n                        </InputGroup.Append>\n                        <InputGroup.Append>\n                            <Button className=\"addBtn\" type=\"submit\">+</Button>\n                        </InputGroup.Append>\n                    </InputGroup>\n                    </Form>\n                    <Table className=\"authorizedTable\">\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>己授權名單</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        {list && list.map((item, index) => {\n                            return (\n                                <tr>\n                                    <td>{index+1}</td>\n                                    <td>{item.email}</td>\n                                    <td><Button className=\"authorizedDeleteBtn\" variant=\"danger\" onClick={() => setisClicked({\n                                        clicked: true,\n                                        email: item.email})}>移除</Button></td>\n                                </tr>\n                            )\n                        })}\n                    </Table>\n                </Card.Body>\n\n            </Card>\n        </React.Fragment>\n\n    )\n\n}","import React, {useState, useEffect} from 'react';\nimport EnrollDetail from './EnrollDetail';\nimport Card from 'react-bootstrap/Card';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport { Parser } from 'json2csv';\nimport qs from 'qs';\n\nexport default function WaitingList(props){\n\n    const courseID = props.course._id;\n    const [isBack, setIsBack] = useState(false);\n    const [records, setRecords] = useState([]);\n    const [noResult, setNoResult] = useState();\n\n    useEffect(() => {\n\n        const url = '/waitinglistByCourseID';\n        const options = {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: qs.stringify({\n                courseID: courseID\n            })\n        };\n\n        fetch(url, options)\n        .then(res => {\n\n            if(res.status === 200){\n                return res.json();\n            }else{\n                return \"no result\";\n            }\n        \n        })\n        .then(res => {\n            console.log(res);\n            if(res !== \"no result\"){\n                setNoResult(false);\n                setRecords(res.records);\n            }else{\n                setNoResult(true);\n                setRecords();\n            }\n            \n        })\n    }, [props])\n\n    function backBtnClicked(){\n        setIsBack(true);\n    }\n\n    function handleExport(){\n\n        console.log(records);\n\n        const fields = [\"username\", \"email\", \"staffid\", \"dept\", \"post\", \"registeredBy\"];\n        const options = { fields }\n\n        const parser = new Parser(options);\n        const csv = parser.parse(records);\n\n        download(csv);\n\n    }\n\n    function download(data){\n\n        const blob = new Blob([data], {type: \"text/csv\"});\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.setAttribute('hidden', '');\n        a.setAttribute('href', url);\n        a.setAttribute('download', props.course.courseName + \"_waitinglist.csv\");\n        document.body.append(a)\n        a.click();\n        document.body.removeChild(a);\n\n    }\n\n    if(isBack){\n        return <EnrollDetail course={props.course}/>\n    }\n\n    return (\n\n        <React.Fragment>\n\n        <Card className=\"detailCard\">\n            <Card.Header className=\"enrollHeaderWrapper\">\n                <Button className=\"backBtn\" onClick={backBtnClicked}>返回查看報名名單</Button>\n                <h1 className=\"enrollDetailTitle\">{props.course.courseName} (後補名單)</h1>\n            </Card.Header>\n            <Card.Body>\n                {noResult && <p>此課程未有候補紀錄</p>}\n                <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>職員編號</th>\n                        <th>姓名</th>\n                        <th>電郵</th>\n                        <th>單位</th>\n                        <th>職位</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n\n                         {records && records.map(record => {\n                            return (\n                                <tr>\n                                    <td>{record.staffid}</td>\n                                    <td>{record.username}</td>\n                                    <td>{record.email}</td>\n                                    <td>{record.dept}</td>\n                                    <td>{record.post}</td>\n                                </tr>\n                            )\n                        })}\n                      \n                    </tbody>\n                </Table>\n                <div className=\"cardBottom\">\n                    <p className=\"enrollNum\">總候補人數： { records && records.length}</p>\n                    <Button className=\"exportBtn\" variant=\"primary\" onClick={handleExport}>匯出候補名單(.csv)</Button>\n                </div>\n          </Card.Body>\n        </Card>\n        </React.Fragment>\n\n    ); \n\n}","import React, { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport CourseDetail from './CourseDetail';\nimport WaitingList from './WaitingList';\nimport { Parser } from 'json2csv';\nimport qs from 'qs';\n\nexport default function EnrollDetail(props){\n\n    const [enrollRecords, setEnrollRecords] = useState();\n    const [waitinglist, setWaitingList] = useState(false);\n    const [isBack, setIsBack] = useState(false);\n    const [isLoad, setIsLoad] = useState(false);\n    const [courseID, setCourseID] = useState(\"\");\n    const [noRecord, setNoRecord] = useState();\n\n    useEffect(() => {\n\n    //   if(!isLoad || courseID !== props.course._id){\n\n        const url = '/enrollDetail';\n          const options = {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: qs.stringify({courseID: props.course._id})\n          };\n\n          fetch(url, options)\n          .then(res => res.json())\n          .then(res => {\n              console.log(res);\n              if(res.message !== \"未有報名記錄\"){\n                setEnrollRecords(res);\n                setNoRecord(false);\n              }else{\n                setEnrollRecords();\n                setNoRecord(true);\n              }\n              setIsLoad(true);\n              \n          })\n    //   }\n\n    //   console.log(enrollRecords);\n\n    }, [props, isLoad]);\n\n    function backBtnClicked(){\n        setIsBack(true);\n    }\n\n    function waitinglistBtnClicked(){\n        setWaitingList(true);\n    }\n\n    function handleExport(){\n\n        const fields = [\"username\", \"email\", \"staffid\", \"dept\", \"post\", \"registeredBy\"];\n        const options = { fields }\n\n        const parser = new Parser(options, {withBOM: true});\n        const csv = parser.parse(enrollRecords.records);\n\n        download(csv);\n\n    }\n\n    function download(data){\n\n        const blob = new Blob([data], {type: \"text/csv\"});\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.setAttribute('hidden', '');\n        a.setAttribute('href', url);\n        a.setAttribute('download', props.course.courseName + \".csv\");\n        document.body.append(a)\n        a.click();\n        document.body.removeChild(a);\n\n    }\n\n    function handleDelete(enrollment){\n        \n        console.log(enrollment);\n\n        const url = \"/deleteEnrollment\";\n        const options = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: qs.stringify({\n                courseID: props.course._id,\n                enrollment: enrollment\n            })\n        }\n\n        fetch(url, options)\n        .then(res => {\n            console.log(\"in promise\");\n            if(res.status === 200){\n                alert(\"此紀錄已刪除\");\n                setIsLoad(false);\n            }else{\n                alert(\"未能刪除此紀錄，請稍後再嘗試\");\n            }\n        })\n\n    }\n\n    if(isBack){\n        return <CourseDetail selectedCourse={props.course}/>\n    }\n\n    if(waitinglist){\n        return <WaitingList course={props.course}/>\n    }\n\n    return (\n\n        <Card className=\"detailCard\">\n            <Card.Header className=\"enrollHeaderWrapper\">\n                <Button className=\"backBtn\" onClick={backBtnClicked}>返回查看課程資料</Button>\n                {/* {console.log(props.courseDetail)} */}\n                <h1 className=\"enrollDetailTitle\">{props.course.courseName}</h1>\n                <Button className=\"waitinglistBtn\" onClick={waitinglistBtnClicked}>查看後補名單</Button>\n            </Card.Header>\n            <Card.Body>\n                { noRecord && <p>此課程未有報名記錄</p> }\n                <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>職員編號</th>\n                        <th>姓名</th>\n                        <th>電郵</th>\n                        <th>單位</th>\n                        <th>職位</th>\n                        <th></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n\n                         {enrollRecords && enrollRecords.records.map(record => {\n                            return (\n                                <tr>\n                                    <td>{record.staffid}</td>\n                                    <td>{record.username}</td>\n                                    <td>{record.email}</td>\n                                    <td>{record.dept}</td>\n                                    <td>{record.post}</td>\n                                    <td><Button variant=\"danger\" onClick={() => {handleDelete(record)}} className=\"recordDelBtn\">刪除紀錄</Button></td>\n                                </tr>\n                            );\n                        })}\n                      \n                    </tbody>\n                </Table>\n                <div className=\"cardBottom\">\n                    <p className=\"enrollNum\">總報名人數： { enrollRecords && enrollRecords.records.length}</p>\n                    <Button className=\"exportBtn\" variant=\"primary\" onClick={handleExport}>匯出名單(.csv)</Button>\n                </div>\n          </Card.Body>\n        </Card>\n\n    );\n}","import React, {useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Redirect } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport qs from 'qs'\nimport { useEffect } from 'react';\nimport CourseDetail from './CourseDetail';\n\nexport default function ModifyCourse(props){\n\n    const [course, setCourse] = useState(props.course);\n    // const [courseToParse, setCourseToParse] = useState();\n    const [isModified, setIsModified] = useState(false);\n    const [parseDate, setParseDate] = useState(false);\n    const [redirect, setRedirect] = useState(false);\n\n    console.log(course);\n\n    useEffect(() => {\n        if(!parseDate){\n\n            const newDate = new Date(course.date);\n            var day = newDate.getDate();\n            var month = newDate.getMonth()+1;\n            const year = newDate.getFullYear();\n\n            if(day <= 9){\n                day = \"0\" + day;\n            }\n\n            if(month <= 9){\n                month = \"0\"+month;\n            }\n\n            setCourse( prevValue => {\n                return {\n                    ...prevValue,\n                    date: year + \"-\" + month + \"-\" + day\n                }\n            })\n            setParseDate(true);\n        }\n    })\n\n    function handleChange(event){\n        const {name, value} = event.target;\n\n        setCourse(prevValue => {\n            return{\n                ...prevValue,\n                [name]: value\n            }\n        })\n    }\n\n    function handleModify(event){\n\n        event.preventDefault();\n\n        const url = \"/modifyCourse\";\n        const options = {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: qs.stringify({course: course})\n        }\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                return res.json();\n            }else{\n                return \"error\";\n            }\n        })\n        .then(res => {\n            if(res !== \"error\"){\n                if(!res.msg){\n                    alert(\"成功修改課程\");\n                    setIsModified(true);\n                }else{\n                    alert(\"未能修改課程，請稍後再嘗試\");\n                }\n            }else{\n                alert(\"未能修改課程，請稍後再嘗試\");\n            }\n        })\n        \n    }\n\n\n    return (\n        <React.Fragment>\n        <h1 className=\"modifyCourseTitle\">修改課程資料</h1>\n\n        <Form onSubmit={handleModify}>\n\n            <div className=\"modifyForm\">\n                <div className=\"inputRow\">\n                    <Form.Group className=\"inputItem\">\n                        <Form.Label className=\"inputLabel\">課程名稱:</Form.Label>\n                        <Form.Control placeholder=\"請輸入課程名稱\" className=\"input\" name=\"courseName\" type=\"text\" onChange={handleChange} value={course.courseName}></Form.Control>\n                    </Form.Group>\n                    <div className=\"inputItem\"></div>\n                    <Form.Group className=\"inputItem\">\n                        <Form.Label className=\"inputLabel\">上課日期:</Form.Label>\n                        <Form.Control placeholder=\"請輸入上課日期\" className=\"input inputDate\" name=\"date\" type=\"date\" onChange={handleChange} value={course.date}></Form.Control>\n                    </Form.Group>\n                </div>\n\n                \n                    <div className=\"inputRow\">\n                        <Form.Group className=\"inputItem\">\n                            <Form.Label className=\"inputLabel\">上課時間:</Form.Label>\n                            <Form.Control placeholder=\"請輸入上課時間\" className=\"input\" name=\"time\" type=\"time\" onChange={handleChange} value={course.time}></Form.Control>\n                        </Form.Group>\n                        <div className=\"inputItem\"></div>\n                        <Form.Group className=\"inputItem\">\n                            <Form.Label className=\"inputLabel\">上課地點:</Form.Label>\n                            <Form.Control placeholder=\"請輸入上課地點\" className=\"input\" name=\"venue\" type=\"text\" onChange={handleChange} value={course.venue}></Form.Control>\n                        </Form.Group>\n                    </div>\n\n                    <div className=\"inputRow\">\n                        <Form.Group className=\"inputItem\">\n                            <Form.Label className=\"inputLabel\">課程名額:</Form.Label>\n                            <Form.Control placeholder=\"請輸入課程名額\" className=\"input\" name=\"quota\" type=\"number\" onChange={handleChange} value={course.quota}></Form.Control>\n                        </Form.Group>\n                        <div className=\"inputItem\"></div>\n                        <Form.Group className=\"inputItem\">\n                            <Form.Label className=\"inputLabel\">課程導師:</Form.Label>\n                            <Form.Control placeholder=\"請輸入課程導師\" className=\"input\" name=\"tutor\" type=\"text\" onChange={handleChange} value={course.tutor}></Form.Control>\n                        </Form.Group>\n                    </div>\n                    <div className=\"inputRow\">\n                        <Form.Group className=\"inputItem\">\n                            <Form.Label className=\"inputLabel courseDescriptionText\">課程簡介:</Form.Label>\n                            <FormControl as=\"textarea\" aria-label=\"With textarea\" rows=\"4\" name=\"description\" onChange={handleChange} value={course.description}/>\n                        </Form.Group>\n                    </div>\n                <Button variant=\"primary\" size=\"lg\" className=\"createBtn\" type=\"submit\">修改課程</Button>\n            \n            </div>\n\n        </Form>\n        </React.Fragment>\n    );\n\n}","import React, { useState } from 'react';\nimport qs from 'qs';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport EnrollDetail from './EnrollDetail';\nimport ModifyCourse from './ModifyCourse';\n\nexport default function CourseDetail(props){\n\n    var date;\n\n    if(props.selectedCourse){\n      date = new Date(props.selectedCourse.date);\n    }\n\n    const [courseID, setCourseID] = useState();\n    const [getCourseDetail, setGetCourseDetail] = useState(false);\n    const [courseDetail, setCourseDetail] = useState({});\n    const [modify, setModify] = useState(false);\n    const [isLoad, setIsLoad] = useState(false);\n\n    function handleClick(){\n\n      if(getCourseDetail === \"未有報名記錄\"){\n        alert(\"未有報名記錄\");\n      }else{\n        setGetCourseDetail(true);\n      }\n\n    }\n\n    function handleDelete(){\n\n      const courseID = props.selectedCourse._id;\n\n      const url = '/deleteCourse';\n        const options = {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: qs.stringify({courseID: courseID})\n        };\n\n        fetch(url, options)\n        .then(res => {\n          if(res.status === 200){\n            alert(\"成功刪除課程\");\n            window.location.reload(true);\n          }else{\n            alert(\"發生錯誤，請稍後再試\");\n          }\n        })\n\n    }\n\n    function handleModify(){\n      setModify(true);\n    }\n\n    if(getCourseDetail){\n      console.log(\"Detail: \" + props.selectedCourse._id);\n      return <EnrollDetail course={props.selectedCourse}/>\n    }\n\n    if(modify){\n      return <ModifyCourse course={props.selectedCourse}/>\n    }\n    \n    \n    return(\n        <div>\n            <Card className=\"detailCard\">\n              <Card.Header className=\"cardDetailWrapper\">\n                    <Button className=\"backBtn\" onClick={handleModify}>修改課程資料</Button>\n                    <h1 className=\"courseTitle\">{props.selectedCourse && props.selectedCourse.courseName}</h1>\n                    <Button variant=\"danger\" className=\"deleteBtn\" onClick={handleDelete}>刪除課程</Button>\n              </Card.Header>\n              <Card.Body>\n                <Card.Title className=\"courseDescription\">{props.selectedCourse && props.selectedCourse.description}</Card.Title>\n                <Card.Text className=\"courseInfo\">上課日期: {date && date.toLocaleDateString()} {props.selectedCourse && props.selectedCourse.time}</Card.Text>\n                <Card.Text className=\"courseInfo\">上課地點: {props.selectedCourse && props.selectedCourse.venue}</Card.Text>\n                <Card.Text className=\"courseInfo\">課程導師: {props.selectedCourse && props.selectedCourse.tutor}</Card.Text>\n                <Card.Text className=\"courseInfo\">尚餘名額: {props.selectedCourse && props.selectedCourse.quota}</Card.Text>\n                <Button variant=\"primary\" className=\"adminEnrollRecordBtn\" onClick={handleClick}>查看報名情況</Button>\n              </Card.Body>\n            </Card>\n        </div>\n    );\n\n}","import React, {useState, useEffect} from 'react';\nimport CreateCourse from './CreateCourse';\nimport AuthorizedList from './AuthorizedList';\nimport CourseDetail from './CourseDetail';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport qs from 'qs';\n\n\n\nexport default function Admin(props){\n\n    const initialCourse = [{\n        _id: \"\",\n        couseName: \"\",\n        date: \"\",\n        time: \"\",\n        venue: \"\",\n        quota: 0,\n        tutor: \"\",\n        description: \"\"\n    }];\n\n    const isAuthorized = props.authorized || false;\n    const isCreate = props.create || false;\n\n    const [courses, setCourses] = useState(initialCourse);\n    const [selectedID, setSelectedID] = useState();\n    const [period, setPeriod] = useState(\"今天\");\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [noCourse, setNoCourse] = useState(false);\n    const [authorized, setAuthorized] = useState(isAuthorized);\n    const [create, setCreate] = useState(isCreate);\n\n    useEffect(() => {\n\n        if(!isLoaded){\n            const url = '/course-by-date';\n            const options = {\n                method: 'POST',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: qs.stringify({\n                    period: period\n                })\n            };\n\n            fetch(url, options)\n            .then(res => res.json())\n            .then(res => {\n                if(res.length === 0){\n                    setNoCourse(true);\n                    setCourses(initialCourse);\n                }else{\n                    if(res !== courses){\n                        setCourses(res);\n                    }\n                    setNoCourse(false);\n                }\n            })\n            setIsLoaded(true);\n        }\n    })\n\n    function handleClick(selectedKey){\n        switch(selectedKey){\n            case \"0\":\n                setAuthorized(false);\n                setCreate(true);\n                setSelectedID();\n                break;\n            case \"1\":\n                setPeriod(\"過往\");\n                setAuthorized(false);\n                setCreate(false);\n                setIsLoaded(false);\n                setSelectedID();\n                break;\n            case \"2\":\n                setPeriod(\"今天\");\n                setAuthorized(false);\n                setCreate(false);\n                setIsLoaded(false);\n                setSelectedID();\n                break;\n            case \"3\":\n                setPeriod(\"未來\");\n                setAuthorized(false);\n                setCreate(false);\n                setIsLoaded(false);\n                setSelectedID();\n                break;\n            case \"4\":\n                setCreate(false);\n                setAuthorized(true);\n                setSelectedID();\n                break;\n            default:\n                break;\n        }\n        \n    }\n\n    function handleSidebarClick(selectedKey){\n        setSelectedID(selectedKey);\n    }\n\n\n    return (\n        <div>\n            <Navbar bg=\"primary\" variant=\"dark\">\n                <Navbar.Brand href=\"/admin\">課程報名系統</Navbar.Brand>\n                <Nav className=\"mr-auto\" defaultActiveKey=\"\" onSelect={(selectedKey) => handleClick(selectedKey)} >\n                  <Nav.Link eventKey=\"0\">新增課程</Nav.Link>\n                  <Nav.Link eventKey=\"1\">以往課程</Nav.Link>\n                  <Nav.Link eventKey=\"2\">今天課程</Nav.Link>\n                  <Nav.Link eventKey=\"3\">未來課程</Nav.Link>\n                  <Nav.Link eventKey=\"4\">授權名單</Nav.Link>\n                </Nav>\n                <Nav>\n                    <Nav.Link href=\"/\">返回報名表格</Nav.Link>\n                </Nav>\n        </Navbar>\n            {(!authorized && !create) && <div className=\"sidebar\">\n\n                <h4 className=\"sidebarTitle\">{period}課程</h4>\n                { noCourse && <p className=\"noCourse\">暫沒有課程</p> }\n\n                <Nav defaultActiveKey=\"\" className=\"flex-column\" onSelect={(selectedKey) => setSelectedID(selectedKey)}>\n\n                    {!noCourse&& courses.map(course => {\n                        const date = new Date(course.date);\n                        return <Nav.Link eventKey={course._id} className=\"courseLink\">{course.courseName} {date.toLocaleDateString()}</Nav.Link>\n                    })}\n\n                </Nav>\n            \n            </div>}\n            \n            {!selectedID && create && <CreateCourse />}\n            {!selectedID && authorized && <AuthorizedList />}\n            {console.log(\"admin: \" + selectedID)}\n            { selectedID && <CourseDetail selectedCourse={courses.find(course => course._id === selectedID)}/> }\n                \n        \n    </div>\n    );\n}","import React, {useState, useEffect} from 'react';\nimport RegisterRecordDetail from './RegisterRecordDetail';\nimport Card from 'react-bootstrap/Card';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport qs from 'qs';\n\nexport default function RegisterWaitinglistRecord(props){\n\n    const [loaded, setLoaded] = useState(false);\n    const [details, setDetails] = useState();\n    const [courseID, setCourseID] = useState(\"\");\n    const [noResult, setNoResult] = useState();\n    const [isBack, setIsBack] = useState(false);\n\n    useEffect(() => {\n\n        if(!loaded || courseID !== props.selectedCourse._id){\n\n            setCourseID(props.selectedCourse._id);\n\n            const url = '/register-record-waitinglist';\n            const options = {\n                method: 'POST',\n                headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: qs.stringify({\n                    courseID: props.selectedCourse._id,\n                    email: localStorage.getItem(\"email\")\n                })\n            };\n\n            fetch(url, options)\n            .then(res => {\n                if(res.status !== 403){\n                    return res.json();\n                }else{\n                    return \"error\";\n                }\n            })\n            .then(res => {\n                \n                if(res !== \"error\"){\n                    setNoResult(false);\n                    setDetails(res);\n                }else{\n                    setNoResult(true);\n                    setDetails();\n                }\n            })\n\n            setLoaded(true);\n        }\n    })\n\n    function handleClick(){\n        setIsBack(true);\n    }\n\n    if(isBack){\n        return <RegisterRecordDetail selectedCourse={props.selectedCourse}/>\n    }\n\n    return (\n\n        <React.Fragment>\n\n                <Card className=\"detailCard\">\n                    <Card.Header className=\"cardDetailWrapper\">\n                        <Button className=\"backBtn\" onClick={handleClick}>返回查看報名紀錄</Button>\n                        <h1 className=\"courseTitle\">{props.selectedCourse && props.selectedCourse.courseName}</h1>\n                    </Card.Header>\n                    <Card.Body>\n                    {noResult && <p>你並沒有此課程的後補報名紀錄</p>}\n                    <Table striped bordered hover>\n                        <thead>\n                          <tr>\n                            <th>職員編號</th>\n                            <th>姓名</th>\n                            <th>電郵</th>\n                            <th>單位</th>\n                            <th>職位</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                            {details && details.map(detail => {\n                                return <tr>\n                                    <td>{detail.staffid}</td>\n                                    <td>{detail.username}</td>\n                                    <td>{detail.email}</td>\n                                    <td>{detail.dept}</td>\n                                    <td>{detail.post}</td>\n                                </tr>\n                            })}\n                        </tbody>\n                    </Table>\n              </Card.Body>\n            </Card>\n                        \n        </React.Fragment>\n\n    );\n\n\n}","import React, { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card'\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport RegisterWaitinglistRecord from './RegisterWaitinglistRecord';\nimport qs from 'qs';\n\nexport default function RegisterRecordDetail(props){\n\n    const [courseID, setCourseID] = useState(\"\");\n    const [details, setDetails] = useState();\n    const [noResult, setNoResult] = useState();\n    const [loaded, setLoaded] = useState(false);\n    const [waitingList, setWaitingList] = useState(false);\n\n    useEffect(() => {\n\n        if(!loaded || courseID !== props.selectedCourse._id){\n\n            setCourseID(props.selectedCourse._id);\n\n            const url = '/register-record';\n            const options = {\n                method: 'POST',\n                headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: qs.stringify({\n                    courseID: props.selectedCourse._id,\n                    email: localStorage.getItem(\"email\")\n                })\n            };\n\n            fetch(url, options)\n            .then(res => {\n                if(res.status !== 403){\n                    return res.json();\n                }else{\n                    return \"error\";\n                }\n            })\n            .then(res => {\n                \n                if(res !== \"error\"){\n                    setNoResult(false);\n                    setDetails(res);\n                }else{\n                    setNoResult(true);\n                    setDetails();\n                }\n            })\n\n            setLoaded(true);\n        }\n    })\n\n    function handleDelete(enrollment){\n\n        console.log(enrollment);\n\n        const url = \"/deleteEnrollment\";\n        const options = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: qs.stringify({\n                courseID: courseID,\n                enrollment: enrollment\n            })\n        }\n\n        fetch(url, options)\n        .then(res => {\n            console.log(res);\n            if(res.status === 200){\n                alert(\"此紀錄已刪除\");\n                setLoaded(false);\n            }else{\n                alert(\"未能刪除此紀錄，請稍後再嘗試\");\n            }\n        })\n\n    }\n\n    function handleClick(){\n        setWaitingList(true);\n    }\n\n    if(waitingList){\n        return <RegisterWaitinglistRecord selectedCourse={props.selectedCourse}/>\n    }\n\n    return(\n\n        <React.Fragment>\n\n            <Card className=\"detailCard\">\n                <Card.Header className=\"cardDetailWrapper\">\n                    <h1 className=\"courseTitle\">{props.selectedCourse && props.selectedCourse.courseName}</h1>\n                    <Button className=\"waitinglistBtn\" onClick={handleClick}>查看後補名單</Button>\n                </Card.Header>\n                <Card.Body>\n                {noResult && <p>你並沒有此課程的報名紀錄</p>}\n                <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>職員編號</th>\n                        <th>姓名</th>\n                        <th>電郵</th>\n                        <th>單位</th>\n                        <th>職位</th>\n                        <th></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                        {details && details.map(detail => {\n                            return <tr>\n                                <td>{detail.staffid}</td>\n                                <td>{detail.username}</td>\n                                <td>{detail.email}</td>\n                                <td>{detail.dept}</td>\n                                <td>{detail.post}</td>\n                                <td><Button variant=\"danger\" onClick={() => {handleDelete(detail)}} className=\"recordDelBtn\">刪除記錄</Button></td>\n                            </tr>\n                        })}\n                    </tbody>\n                </Table>\n          </Card.Body>\n        </Card>\n            \n    </React.Fragment>\n\n    );\n\n}","import React, {useState, useEffect} from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport RegisterRecordDetail from './RegisterRecordDetail';\nimport qs from 'qs';\n\nexport default function RegisterRecord(){\n\n    const initialCourse = [{\n        _id: \"\",\n        couseName: \"\",\n        date: \"\",\n        time: \"\",\n        venue: \"\",\n        quota: 0,\n        tutor: \"\",\n        description: \"\"\n    }];\n\n    const[courses, setCourses] = useState(initialCourse);\n    const [selectedID, setSelectedID] = useState();\n    const [period, setPeriod] = useState(\"今天\");\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [noCourse, setNoCourse] = useState(false);\n\n    useEffect(() => {\n\n        if(!isLoaded){\n            const url = '/course-by-date';\n            const options = {\n                method: 'POST',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: qs.stringify({\n                    period: period\n                })\n            };\n\n            fetch(url, options)\n            .then(res => res.json())\n            .then(res => {\n                if(res.length === 0){\n                    setNoCourse(true);\n                    setCourses(initialCourse);\n                }else{\n                    if(res !== courses){\n                        setCourses(res);\n                    }\n                    setNoCourse(false);\n                }\n            })\n            setIsLoaded(true);\n        }\n    })\n\n    function handleClick(selectedKey){\n        switch(selectedKey){\n            case \"0\":\n                setPeriod(\"過往\");\n                setIsLoaded(false);\n                setSelectedID();\n                break;\n            case \"1\":\n                setPeriod(\"今天\");\n                setIsLoaded(false);\n                setSelectedID();\n                break;\n            case \"2\":\n                setPeriod(\"未來\");\n                setIsLoaded(false);\n                setSelectedID();\n                break;\n            default:\n                break;\n        }\n        \n    }\n\n    function handleSidebarClick(selectedKey){\n        setSelectedID(selectedKey);\n    }\n\n    return(\n        <React.Fragment>\n        <Navbar bg=\"primary\" variant=\"dark\">\n            <Navbar.Brand href=\"/\">靈實員工培訓課程報名系統</Navbar.Brand>\n            <Nav className=\"mr-auto\" defaultActiveKey=\"\" onSelect={(selectedKey) => handleClick(selectedKey)}>\n                <Nav.Link eventKey=\"0\" >過往課程</Nav.Link>\n                <Nav.Link eventKey=\"1\" >今天課程</Nav.Link>\n                <Nav.Link eventKey=\"2\" >末來課程</Nav.Link>\n            </Nav>\n        </Navbar>\n        <div className=\"sidebar\">\n\n            <h4 className=\"sidebarTitle\">{period}課程</h4>\n            { noCourse && <p className=\"noCourse\">暫沒有課程</p> }\n            <Nav defaultActiveKey=\"\" className=\"flex-column\" onSelect={(selectedKey) => handleSidebarClick(selectedKey)}>\n                {!noCourse && courses.map(course => {\n                    const date = new Date(course.date);\n                    return <Nav.Link eventKey={course._id} className=\"courseLink\">{course.courseName} {date.toLocaleDateString()}</Nav.Link>\n                })}\n            </Nav>\n\n        </div>\n        \n        {selectedID && <RegisterRecordDetail selectedCourse={courses.find(course => course._id === selectedID)} />}\n\n        </React.Fragment>\n    );\n\n}","import React, {useEffect} from \"react\";\nimport ApplicationForm from \"./ApplicationForm\";\nimport Register from \"./Register\";\nimport { ProtectedRoute } from \"./protected-route\";\nimport { AdminRoute } from \"./admin-route\";\nimport Login from \"./Login\";\nimport Admin from \"./Adminastrative/Admin\";\nimport RegisterRecord from \"./RegisterRecord\";\nimport axios from 'axios';\n\nimport { BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n\nexport default function App(props) {\n\n    \n    return(\n    <Router>\n        <Switch>\n            <Route component={Login} exact path=\"/login\" />\n            <ProtectedRoute component={ApplicationForm} exact path=\"/\" />\n            <AdminRoute component={Admin} exact path=\"/admin\" />\n            <Route component={Register} exact path=\"/register\"/>\n            <Route component={RegisterRecord} exact path=\"/register-record\"/>\n        </Switch>\n    </Router> \n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}