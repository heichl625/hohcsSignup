{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/ApplicationForm.jsx","components/Register.jsx","components/protected-route.jsx","components/admin-route.jsx","components/Auth.jsx","components/Login.jsx","components/Adminastrative/Navigator.jsx","components/Adminastrative/WaitingList.jsx","components/Adminastrative/EnrollDetail.jsx","components/Adminastrative/CourseDetail.jsx","components/Adminastrative/Admin.jsx","components/Adminastrative/CreateCourse.jsx","components/Adminastrative/History.jsx","components/Adminastrative/Future.jsx","components/RegisterWaitinglistRecord.jsx","components/RegisterRecordDetail.jsx","components/RegisterRecord.jsx","components/Adminastrative/AuthorizedList.jsx","components/App.jsx","index.js"],"names":["Header","useState","isLoggedOut","setLoggedOut","console","log","Navbar","bg","variant","Brand","href","Nav","className","Link","Button","onClick","fetch","method","headers","then","res","status","alert","localStorage","clear","catch","err","to","Footer","props","getItem","ApplicationForm","courseList","setCourseList","username","email","staffid","post","dept","course","newValue","setNewValue","isDataObtained","setIsDataObtained","fields","role","checkQuota","split","courseName","courseDate","options","body","qs","stringify","json","quota","clearInput","waitinglist","_id","enroll","prevValue","handleChange","event","target","name","value","useEffect","setItem","length","dateStr","Date","date","toLocaleDateString","src","Form","onSubmit","preventDefault","FormGroup","Label","Control","placeholder","size","onChange","InputGroup","type","Append","Text","as","map","Register","password","userData","setUserData","isRegistered","setRegister","Fragment","user","token","Group","ProtectedRoute","Component","component","rest","render","AdminRoute","this","authenticated","cb","Login","isDirected","redirect","setRedirect","reLogin","setRelogin","Navigatior","WaitingList","courseID","isBack","setIsBack","records","setRecords","EnrollDetail","courseDetail","Card","Body","Table","striped","bordered","hover","record","enrollRecords","setEnrollRecords","setWaitingList","CourseDetail","selectedCourse","getCourseDetail","setGetCourseDetail","setCourseDetail","window","location","reload","Title","description","time","venue","tutor","message","Admin","initialCourse","couseName","courses","setCourses","selectedID","setSelectedID","courseToParse","setCourseToParse","find","defaultActiveKey","onSelect","selectedKey","eventKey","CreateCourse","newCourse","setNewCourse","isCreated","setIsCreated","cousreName","FormControl","aria-label","rows","History","Future","RegisterWaitinglistRecord","loaded","setLoaded","details","setDetails","setCourseID","noResult","setNoResult","RegisterRecordDetail","detail","waitingList","RegisterRecord","period","setPeriod","isLoaded","setIsLoaded","noCourse","setNoCourse","handleClick","handleSidebarClick","AuthorizedList","setUsername","list","setList","isObtained","setIsObtained","clicked","isClicked","setisClicked","error","item","index","App","axios","get","removeItem","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ba3616dc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { Redirect } from \"react-router-dom\";\n\nfunction Header(){\n\n    const [isLoggedOut, setLoggedOut] = useState(\"false\");\n\n    console.log(\"rendering header\");\n\n\n    function handleLogout(){\n\n        const url = '/logout';\n        const options = {\n            method: \"GET\",\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/json\"\n            }\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                console.log(\"Logout now\");\n                alert(\"登出成功\");\n                localStorage.clear();\n                setLoggedOut(\"true\");\n            }else{\n                return \"error\";\n            }\n            \n        }).catch(err => {\n            console.log(\"Login: \" + err);\n        });\n\n    }\n\n    return (\n\n    <Navbar bg=\"primary\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">靈實員工培訓課程報名系統</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/register-record\">報名記錄</Nav.Link>\n        </Nav>\n        <Button variant=\"outline-light\" onClick={handleLogout}>登出</Button>\n\n        { isLoggedOut === \"true\" && <Redirect to=\"/login\" /> }\n    </Navbar>\n    \n    );\n\n}\n\nexport default Header;\n\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nfunction Footer(props){\n\n    return <footer>\n        {localStorage.getItem('isAdmin') && <Link to=\"/admin\" className=\"adminLink\">管理員模式</Link> }\n    </footer>;\n}\n\nexport default Footer; ","import React, {useState, useEffect} from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport qs from 'qs';\n\nfunction ApplicationForm(){\n\n\n    const [courseList, setCourseList] = useState([{}]);\n\n    const [newValue, setNewValue] = useState({\n        username: \"\",\n        email: \"\",\n        staffid: \"\",\n        post: \"\",\n        dept: \"\",\n        course: \"\",\n    });\n    \n    const [isDataObtained, setIsDataObtained] = useState(false);\n   \n\n    const fields = [\"姓名\", \"電郵\", \"職員編號\", \"職位\", \"單位\", \"報讀課程\"];\n    var role = \"\";\n\n    function getFutureCourses(){\n\n        const futureCourseURL = \"/futureCourse\";\n        const futureCourseOptions = {\n            method: \"GET\",\n            headers: {\n              \"Accept\": \"application/json\",\n            }\n        };\n\n        fetch(futureCourseURL, futureCourseOptions)\n        .then(res => res.json())\n        .then(res => {\n            if(res.length > 0){\n                    setCourseList(res);\n                    setNewValue(prevValue => {\n    \n                        const date = new Date(res[0].date);\n                        const dateStr = date.toLocaleDateString();\n    \n                        return{\n                            ...prevValue,\n                            course: res[0].courseName + \" \" + dateStr\n                        }\n                    })\n                }\n            setIsDataObtained(true);\n        }).catch(err => {\n            console.log(\"futureCourse: \" + err);\n        });\n    }\n\n    useEffect( () => {\n\n        if(!isDataObtained){\n            const url = \"/user\";\n            const options = {\n                method: \"POST\",\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/x-www-form-urlencoded\"\n                },\n                body: qs.stringify({\"username\": localStorage.getItem(\"username\")})\n            };\n\n            fetch(url, options)\n            .then(res => res.json())\n            .then(res => {\n\n                role = res.role;\n\n                if(role === \"admin\"){\n                    localStorage.setItem(\"isAdmin\", true);\n                }\n\n                setNewValue({\n                    username: res.name,\n                    email: res.username,\n                    staffid: res.staffid,\n                    post: res.post,\n                    dept: res.dept,\n                    course: \"\",\n                })\n            }).catch(err => {\n                console.log(\"user: \" + err);\n            });\n            getFutureCourses();\n        }\n            \n\n    })\n\n    function enroll(course){\n\n        const url = \"/enroll\";\n        const options = {\n            method: \"POST\",\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: qs.stringify({\n                \"courseID\": course._id, \n                \"enrollment\": newValue,\n                \"registeredBy\": localStorage.getItem(\"username\")\n            })\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                alert(\"成功報讀課程\");\n                clearInput();\n                // setNewValue(prevValue => {\n                    \n                //     return {\n                //         ...prevValue,\n                //         username: \"\",\n                //         email: \"\",\n                //         staffid: \"\",\n                //         post: \"\",\n                //         dept: \"\"\n                //     }\n\n                // });\n            }else{\n                alert(\"未能成功報讀課程, 請稍後再嘗試\");\n            }\n        }).catch(err => {\n            console.log(\"enroll: \" + err);\n        });\n    }\n\n\n\n    function waitinglist(courseName, courseDate){\n\n        const url = \"/waitinglist\";\n        const options = {\n            method: \"POST\",\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: qs.stringify({\n                \"courseName\": courseName,\n                \"courseDate\": courseDate,\n                \"enrollment\": newValue,\n                \"registeredBy\": localStorage.getItem(\"username\")\n            })\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                alert(\"課程名額暫滿，你將會加進後備名單。如最後能夠成功報讀，屆時將會以公司電郵通知\");\n                clearInput();\n                // setNewValue(prevValue => {\n                    \n                //     return {\n                //         ...prevValue,\n                //         username: \"\",\n                //         email: \"\",\n                //         staffid: \"\",\n                //         post: \"\",\n                //         dept: \"\"\n                //     }\n\n                // });\n            }else{\n                alert(\"發生錯誤，請稍後再嘗試\");\n            }\n        }).catch(err => {\n            console.log(\"waitinglist: \" + err);\n        });\n    }\n\n\n    function checkQuota(){\n\n        const courseInfo = newValue.course.split(' ');\n\n        const courseName = newValue.course.split(' ')[0];\n        console.log(\"name: \" + courseName);\n        const courseDate = newValue.course.split(' ')[1];\n        console.log(\"name: \" + courseDate);\n\n        const url = \"/checkQuota\";\n        const options = {\n            method: \"POST\",\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: qs.stringify({\n                \"courseName\": courseName,\n                \"courseDate\": courseDate\n            })\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                return res.json()\n            }else{\n                alert(\"發生錯誤，請稍後再嘗試\");\n                return \"error\";\n            }\n        })\n        .then(res => {\n            if(res.quota === 0){\n                waitinglist(courseName, courseDate);\n            }else if(res !== \"error\"){\n                enroll(res);\n            }\n        }).catch(err => {\n            console.log(\"Login: \" + err);\n        });\n    }\n\n\n    function handleSubmit(event){\n\n        event.preventDefault();\n        checkQuota();\n        //enroll();\n    }\n\n    function clearInput(){\n\n        setNewValue(prevValue => {\n                    \n            return {\n                ...prevValue,\n                username: \"\",\n                email: \"\",\n                staffid: \"\",\n                post: \"\",\n                dept: \"\",\n                course: \"\"\n            }\n\n        });\n\n    }\n\n\n    function handleChange(event){\n\n        const {name, value} = event.target;\n\n        setNewValue(prevValue => {\n            return{\n                ...prevValue,\n                [name]: value\n            }; \n        });\n\n    }\n\n    return (\n        <div>\n    <Header />\n    <img src=\"https://www.hohcs.org.hk/App/Modules/Admin/Tpl/Static/upload/image/20170418/20170418125117_21846.png\" className=\"formIcon\"/>\n\n    \n    <Form className=\"inputForm\" onSubmit={handleSubmit}>\n    \n        <div className=\"inputRow\">\n            <div className=\"inputItem\">\n                <FormGroup>\n                    <Form.Label className=\"inputLabel\">名稱:</Form.Label>\n                    <Form.Control placeholder={fields[0]} size=\"lg\" onChange={handleChange} value={newValue.username} name=\"username\"></Form.Control>\n                </FormGroup>\n            </div>\n\n            <div className=\"inputItem\"></div>\n\n            <div className=\"inputItem\">\n                <FormGroup className=\"inputItem\">\n                    <Form.Label className=\"inputLabel\">電郵:</Form.Label>\n                    <InputGroup>\n                        <Form.Control placeholder={fields[1]} size=\"lg\" name=\"email\" type=\"text\" onChange={handleChange} value={newValue.email} className=\"input\"></Form.Control>\n                        <InputGroup.Append>\n                            <InputGroup.Text>@hohsc.org.hk</InputGroup.Text>\n                        </InputGroup.Append>\n                    </InputGroup> \n                </FormGroup>\n            </div>\n        </div>\n            \n        <div className=\"inputRow\">\n\n            <div className=\"inputItem\">\n\n                <FormGroup>\n                    <Form.Label className=\"inputLabel\">職員編號:</Form.Label>\n                    <Form.Control placeholder={fields[2]} size=\"lg\" onChange={handleChange} value={newValue.staffid} name=\"staffid\"></Form.Control>\n                </FormGroup>\n            </div>\n\n            <div className=\"inputItem\"></div>\n\n            <div className=\"inputItem\">\n                <FormGroup>\n                    <Form.Label className=\"inputLabel\">職位:</Form.Label>\n                    <Form.Control placeholder={fields[3]} size=\"lg\" onChange={handleChange} value={newValue.post} name=\"post\"></Form.Control>\n                </FormGroup>\n            </div>\n\n        </div>\n            \n\n        <div className=\"inputRow\">\n\n            <div className=\"inputItem\">\n                <FormGroup>\n                    <Form.Label className=\"inputLabel\">單位:</Form.Label>\n                    <Form.Control placeholder={fields[4]} size=\"lg\" onChange={handleChange} value={newValue.dept} name=\"dept\"></Form.Control>\n                </FormGroup>\n            </div>\n\n            <div className=\"inputItem\"></div>\n\n            <div className=\"inputItem\">\n                <FormGroup>\n                    <Form.Label className=\"inputLabel\">報讀課程:</Form.Label>\n                    <Form.Control size=\"lg\" onChange={handleChange} value={newValue.course} name=\"course\" as=\"select\">\n                        <option>請選擇課程</option>\n                        {courseList.length > 0 && courseList.map(course => {\n                            var date = new Date(course.date);\n                            return <option>{course.courseName} {date.toLocaleDateString()}</option>\n                        })}\n                    </Form.Control>\n                </FormGroup>\n            </div>\n\n        </div>\n\n        <div className=\"btnWrapper\">\n            <Button variant=\"primary\" size=\"lg\" type=\"submit\" className=\"submitBtn\">提交</Button>\n\n            <Button variant=\"danger\" size=\"lg\" onClick={clearInput} className=\"clearBtn\">清除所有資料</Button>\n        </div>\n\n    </Form>\n    <Footer role={role}/>\n    </div>\n    );\n}\n\nexport default ApplicationForm;","import React, {useState} from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport { Redirect } from 'react-router-dom';\nimport qs from 'qs';\n\nexport default function Register(){\n\n    const [userData, setUserData] = useState({\n\n        username: \"\",\n        password: \"\",\n        staffid: \"\",\n        name: \"\",\n        post: \"\",\n        dept: \"\"\n\n    });\n\n    const [isRegistered, setRegister] = useState(false)\n\n    function handleChange(event){\n\n        const {name, value} = event.target;\n        \n        setUserData(prevValue => {\n            return{\n                ...prevValue,\n                [name]: value\n            }; \n        });\n        \n    }\n\n    function handleRegister(event){\n\n        event.preventDefault();\n\n        const user = {\n            username: userData.username,\n            password: userData.password,\n            staffid: userData.staffid,\n            name: userData.name,\n            post: userData.post,\n            dept: userData.dept\n        };\n\n        const url = '/register';\n        const options = {\n            method: 'POST',\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: qs.stringify(user)\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                return res.json();\n            }else{\n                return \"error\";\n            }\n        })\n        .then(res => {\n            if(res !== \"error\"){\n                localStorage.setItem('userToken', res.token);\n                localStorage.setItem('isAuthorized', true);\n                localStorage.setItem('username', res.user.username);\n                setRegister(true);\n            }else{\n                alert(\"未能成功註冊，請再嘗試\");\n            }\n            \n        })\n    }\n\n    return (\n        <React.Fragment>\n\n            <img src=\"https://www.hohcs.org.hk/App/Modules/Admin/Tpl/Static/upload/image/20170418/20170418125117_21846.png\" className=\"icon-register\"/>\n\n                <Form onSubmit={handleRegister}>\n\n                            <Form.Group className=\"inputGroup\">\n                                <Form.Label className=\"inputLabel\">電郵:</Form.Label>\n                                <InputGroup>\n                                    <Form.Control placeholder=\"請輸入電郵\" className=\"input\" name=\"username\" onChange={handleChange} value={userData.username}></Form.Control>\n                                    <InputGroup.Append>\n                                        <InputGroup.Text>@hohsc.org.hk</InputGroup.Text>\n                                    </InputGroup.Append>\n                                </InputGroup> \n                            </Form.Group>\n\n\n                            <Form.Group className=\"inputGroup\">\n                                <Form.Label className=\"inputLabel\">密碼:</Form.Label>\n                                <Form.Control placeholder=\"請輸入密碼\" onChange={handleChange} name=\"password\" value={userData.password} type=\"password\" className=\"input\"></Form.Control>\n                            </Form.Group>\n\n\n\n                            <Form.Group className=\"inputGroup\">\n                                <Form.Label className=\"inputLabel\">姓名:</Form.Label>\n                                <Form.Control placeholder=\"請輸入姓名\" onChange={handleChange} name=\"name\" value={userData.name} type=\"text\" className=\"input\"></Form.Control>\n                            </Form.Group>\n\n\n                            <Form.Group className=\"inputGroup\">\n                                <Form.Label className=\"inputLabel\"> 單位:</Form.Label>\n                                <Form.Control placeholder=\"請輸入單位\" onChange={handleChange} name=\"dept\" value={userData.dept} type=\"text\" className=\"input\"></Form.Control>\n                            </Form.Group>\n\n                            <Form.Group className=\"inputGroup\">\n                                <Form.Label className=\"inputLabel\"> 職位:</Form.Label>\n                                <Form.Control placeholder=\"請輸入職位\" onChange={handleChange} name=\"post\" value={userData.post} type=\"text\" className=\"input\"></Form.Control>\n                            </Form.Group>\n\n\n                            <Form.Group className=\"inputGroup\">\n                                <Form.Label className=\"inputLabel\"> 職員編號:</Form.Label>\n                                <Form.Control placeholder=\"請輸入職員編號\" onChange={handleChange} name=\"staffid\" value={userData.staffid} type=\"text\" className=\"input\"></Form.Control>\n                            </Form.Group>\n\n                        <Button variant=\"primary\" size=\"lg\" className=\"registerBtn\" type=\"submit\">註冊</Button>\n\n                { isRegistered && <Redirect to=\"/\" /> }\n                </Form>\n\n        </React.Fragment>\n    );\n}","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport const ProtectedRoute = ({component: Component, ...rest}) => {\n\n    return (\n        <Route {...rest} render={\n            (props) => {\n                if(localStorage.getItem('isAuthorized')){\n                    return <Component {...props}/>;\n                }else{\n                    return <Redirect to=\"/login\" />;\n                }\n            }\n        }>\n\n        </Route>\n    );\n}","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport const AdminRoute = ({component: Component, ...rest}) => {\n\n    return (\n        <Route {...rest} render={\n            (props) => {\n                if(localStorage.getItem('isAdmin')){\n                    return <Component {...props}/>;\n                }else{\n                    return <Redirect to=\"/\" />;\n                }\n            }\n        }>\n\n        </Route>\n    );\n}","class Auth {\n    constructor(){\n        this.authenticated = false;\n    }\n\n    login(cb){\n        this.authenticated = true;\n        cb();\n    }\n\n    logout(cb){\n        this.authenticated = false;\n        cb();\n    }\n\n    isAuthenticated(){\n        return this.authenticated;\n    }\n}\n\nexport default new Auth();","import React, { useState } from \"react\";\nimport auth from \"./Auth\";\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport { Link, Redirect } from 'react-router-dom';\nimport qs from 'qs';\n\nfunction Login() {\n\n    const [userData, setUserData] = useState({\n\n        username: \"\",\n        password: \"\"\n\n    });\n\n    const [redirect, setRedirect] = useState({\n        to: \"\",\n        isDirected: null\n    });\n\n    const [reLogin, setRelogin] = useState(false);\n\n    if(localStorage.getItem('isAuthorized')){\n        return <Redirect to=\"/\" />;\n    }\n\n\n    function handleChange(event){\n\n        const {name, value} = event.target;\n\n        setUserData(prevValue => {\n            return {\n                ...prevValue,\n                [name]: value\n            };\n        });\n\n    }\n\n    function handleSubmit(event){\n\n        const user = {\n            \"username\": userData.username,\n            \"password\": userData.password\n        }\n\n        event.preventDefault();\n\n        const url = '/login';\n        const options = {\n            method: 'POST',\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: qs.stringify(user)\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                return res.json();\n            }else{\n                return \"error\";\n            }\n            \n        })\n        .then(res => {\n\n            if(res !== \"error\"){\n                localStorage.setItem('userToken', res.token);\n                localStorage.setItem('isAuthorized', true);\n                localStorage.setItem('username', res.user.username);\n                setRedirect({\n                    to: \"/\",\n                    isDirected: true\n                });\n            }else{\n                setRelogin(true);\n                setUserData({\n                    username: \"\",\n                    password: \"\"\n                })\n            }\n            \n        }).catch(err => {\n            console.log(\"Login: \" + err);\n        });\n    }\n\n    return(\n        <React.Fragment>\n        <img src=\"https://www.hohcs.org.hk/App/Modules/Admin/Tpl/Static/upload/image/20170418/20170418125117_21846.png\" className=\"icon\"/>\n\n    { reLogin && <p className=\"loginError\">登入電郵或密碼錯誤，請重新輸入</p> }\n    \n    {/* onSubmit={handleSubmit} */}\n        <Form onSubmit={handleSubmit} className=\"formInput\">\n            \n                    <InputGroup className=\"loginInput\">\n                        <Form.Control placeholder=\"電郵\" className=\"input\" name=\"username\" onChange={handleChange} value={userData.username}></Form.Control>\n                        <InputGroup.Append>\n                            <InputGroup.Text className=\"emailText\">@hohsc.org.hk</InputGroup.Text>\n                        </InputGroup.Append>\n                    </InputGroup> \n       \n         \n                    <Form.Group className=\"loginInput\">\n                        <Form.Control placeholder=\"密碼\" onChange={handleChange} name=\"password\" value={userData.password} type=\"password\"></Form.Control>\n                    </Form.Group>\n            \n            {/* onClick={handleLogin} */}\n                <Button variant=\"primary\" size=\"lg\" className=\"loginBtn\" type=\"submit\">登入</Button>\n                <p className=\"remindText\">如未曾註冊，請先註冊。</p>\n\n                \n                <Link to=\"/register\">\n                    <Button variant=\"secondary\" size=\"lg\" className=\"registerBtn\">註冊</Button>\n                </Link>\n                \n                \n                \n        </Form>\n        {redirect.isDirected && <Redirect to={redirect.to} /> }\n\n        </React.Fragment>\n    );\n\n}\n\nexport default Login;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nexport default function Navigatior(){\n    return (\n        <Navbar bg=\"primary\" variant=\"dark\">\n          <Navbar.Brand href=\"/admin\">課程報名系統</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/createcourse\">新增課程</Nav.Link>\n            <Nav.Link href=\"/history\">以往課程</Nav.Link>\n            <Nav.Link href=\"/admin\">今天課程</Nav.Link>\n            <Nav.Link href=\"/future\">未來課程</Nav.Link>\n            <Nav.Link href=\"/authorized-list\">授權名單</Nav.Link>\n          </Nav>\n          <Nav>\n            <Nav.Link href=\"/\">返回報名表格</Nav.Link>\n          </Nav>\n        </Navbar>\n    );\n}\n","import React, {useState, useEffect} from 'react';\nimport EnrollDetail from './EnrollDetail';\nimport Card from 'react-bootstrap/Card';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport qs from 'qs';\n\nexport default function WaitingList(props){\n\n    const courseID = props.courseID;\n    const [isBack, setIsBack] = useState(false);\n    const [records, setRecords] = useState([]);\n\n    useEffect(() => {\n\n        const url = '/waitinglistByCourseID';\n        const options = {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: qs.stringify({\n                courseID: courseID\n            })\n        };\n\n        fetch(url, options)\n        .then(res => res.json())\n        .then(res => {\n            if(records.length === 0){\n                setRecords(res.records);\n            }\n        })\n    })\n\n    function backBtnClicked(){\n        setIsBack(true);\n    }\n\n    if(isBack){\n        return <EnrollDetail courseDetail={props.courseDetail} course={props.course}/>\n    }\n\n    return (\n\n        <React.Fragment>\n\n        <Card className=\"detailCard\">\n            <Card.Header className=\"enrollHeaderWrapper\">\n                <Button className=\"backBtn\" onClick={backBtnClicked}>返回查看報名名單</Button>\n                <h1 className=\"enrollDetailTitle\">{props.courseDetail.courseName} (後補名單)</h1>\n            </Card.Header>\n            <Card.Body>\n                <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>職員編號</th>\n                        <th>姓名</th>\n                        <th>電郵</th>\n                        <th>單位</th>\n                        <th>職位</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n\n                         {records && records.map(record => {\n                            return (\n                                <tr>\n                                    <td>{record.staffid}</td>\n                                    <td>{record.username}</td>\n                                    <td>{record.email}</td>\n                                    <td>{record.dept}</td>\n                                    <td>{record.post}</td>\n                                </tr>\n                            )\n                        })}\n                      \n                    </tbody>\n                </Table>\n                <p>總後補人數： { records && records.length }</p>\n          </Card.Body>\n        </Card>\n        </React.Fragment>\n\n    ); \n\n}","import React, { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport CourseDetail from './CourseDetail';\nimport WaitingList from './WaitingList';\n\nexport default function EnrollDetail(props){\n\n    const [enrollRecords, setEnrollRecords] = useState([]);\n    const [waitinglist, setWaitingList] = useState(false);\n    const [isBack, setIsBack] = useState(false);\n\n    useEffect(() => {\n        setEnrollRecords(props.courseDetail.records);\n    })\n\n    function backBtnClicked(){\n        setIsBack(true);\n    }\n\n    function waitinglistBtnClicked(){\n        setWaitingList(true);\n    }\n\n    if(isBack){\n        return <CourseDetail selectedCourse={props.course}/>\n    }\n\n    if(waitinglist){\n        return <WaitingList courseID={props.course._id} courseDetail={props.courseDetail} course={props.course}/>\n    }\n\n    return (\n\n        <Card className=\"detailCard\">\n            <Card.Header className=\"enrollHeaderWrapper\">\n                <Button className=\"backBtn\" onClick={backBtnClicked}>返回查看課程資料</Button>\n                <h1 className=\"enrollDetailTitle\">{props.courseDetail.courseName}</h1>\n                <Button className=\"waitinglistBtn\" onClick={waitinglistBtnClicked}>查看後補名單</Button>\n            </Card.Header>\n            <Card.Body>\n                <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>職員編號</th>\n                        <th>姓名</th>\n                        <th>電郵</th>\n                        <th>單位</th>\n                        <th>職位</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n\n                         {enrollRecords && enrollRecords.map(record => {\n                            return (\n                                <tr>\n                                    <td>{record.staffid}</td>\n                                    <td>{record.username}</td>\n                                    <td>{record.email}</td>\n                                    <td>{record.dept}</td>\n                                    <td>{record.post}</td>\n                                </tr>\n                            );\n                        })}\n                      \n                    </tbody>\n                </Table>\n                <p>總報名人數： { enrollRecords && enrollRecords.length}</p>\n          </Card.Body>\n        </Card>\n\n    );\n}","import React, { useState } from 'react';\nimport qs from 'qs';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport EnrollDetail from './EnrollDetail';\n\nexport default function CourseDetail(props){\n\n    var date;\n\n    if(props.selectedCourse){\n      date = new Date(props.selectedCourse.date);\n    }\n    const [getCourseDetail, setGetCourseDetail] = useState(false);\n\n    const [courseDetail, setCourseDetail] = useState({});\n\n    function handleClick(){\n\n      const courseID = props.selectedCourse._id;\n\n      const url = '/enrollDetail';\n        const options = {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: qs.stringify({courseID: courseID})\n        };\n\n        fetch(url, options)\n        .then(res => res.json())\n        .then(res => {\n            if(res.message === \"未有報名記錄\"){\n              alert(res.message)\n            }else{\n              setGetCourseDetail(true);\n              setCourseDetail(res);\n            }\n        })\n\n    }\n\n    function handleDelete(){\n\n      const courseID = props.selectedCourse._id;\n\n      const url = '/deleteCourse';\n        const options = {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: qs.stringify({courseID: courseID})\n        };\n\n        fetch(url, options)\n        .then(res => {\n          if(res.status === 200){\n            alert(\"成功刪除課程\");\n            window.location.reload(true);\n          }else{\n            alert(\"發生錯誤，請稍後再試\");\n          }\n        })\n\n    }\n\n    if(getCourseDetail){\n      return <EnrollDetail courseDetail={courseDetail} course={props.selectedCourse}/>\n    }\n    \n    \n    return(\n        <div>\n            <Card className=\"detailCard\">\n              <Card.Header className=\"cardDetailWrapper\">\n                    <h1 className=\"courseTitle\">{props.selectedCourse && props.selectedCourse.courseName}</h1>\n                    <Button variant=\"danger\" className=\"deleteBtn\" onClick={handleDelete}>刪除課程</Button>\n              </Card.Header>\n              <Card.Body>\n                <Card.Title className=\"courseDescription\">{props.selectedCourse && props.selectedCourse.description}</Card.Title>\n                <Card.Text className=\"courseInfo\">上課日期: {date && date.toLocaleDateString()} {props.selectedCourse && props.selectedCourse.time}</Card.Text>\n                <Card.Text className=\"courseInfo\">上課地點: {props.selectedCourse && props.selectedCourse.venue}</Card.Text>\n                <Card.Text className=\"courseInfo\">課程導師: {props.selectedCourse && props.selectedCourse.tutor}</Card.Text>\n                <Card.Text className=\"courseInfo\">尚餘名額: {props.selectedCourse && props.selectedCourse.quota}</Card.Text>\n                <Button variant=\"primary\" className=\"adminEnrollRecordBtn\" onClick={handleClick}>查看報名情況</Button>\n              </Card.Body>\n            </Card>\n        </div>\n    );\n\n}","import React, {useState, useEffect} from 'react';\nimport Navigator from './Navigator';\nimport CourseDetail from './CourseDetail';\nimport Nav from 'react-bootstrap/Nav';\n\n\n\nexport default function Admin(){\n\n    const initialCourse = [{\n        _id: \"\",\n        couseName: \"\",\n        date: \"\",\n        time: \"\",\n        venue: \"\",\n        quota: 0,\n        tutor: \"\",\n        description: \"\"\n    }];\n\n    const[courses, setCourses] = useState(initialCourse);\n    const [selectedID, setSelectedID] = useState(\"\");\n    const [courseToParse, setCourseToParse] = useState(initialCourse[0]);\n\n    useEffect(() => {\n\n        const url = '/adminTodayCourse';\n        const options = {\n            method: 'GET',\n            headers: {\n              'Accept': 'application/json',\n            },\n        };\n\n        fetch(url, options)\n        .then(res => res.json())\n        .then(res => {\n            if(courses === initialCourse){\n                setCourses(res);\n            }\n        })\n\n        setCourseToParse(courses.find(course => course._id === selectedID));\n    })\n\n\n    return (\n        <div>\n            <Navigator />\n            <div className=\"sidebar\">\n\n                <h4 className=\"sidebarTitle\">今天課程</h4>\n\n                <Nav defaultActiveKey=\"\" className=\"flex-column\" onSelect={(selectedKey) => setSelectedID(selectedKey)}>\n\n                    {courses.map(course => {\n                        const date = new Date(course.date);\n                        return <Nav.Link eventKey={course._id} className=\"courseLink\">{course.courseName} {date.toLocaleDateString()}</Nav.Link>\n                    })}\n\n                    {courses.length === 0 && <p className=\"noCourse\">今天沒有課程</p>}\n\n                </Nav>\n            \n            </div>\n            \n            { selectedID && <CourseDetail selectedCourse={courseToParse}/> }\n                \n        \n    </div>\n    );\n}","import React, { useState } from 'react';\nimport Navigator from './Navigator';\nimport Button from 'react-bootstrap/Button';\nimport { Redirect } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport qs from 'qs'\n\n\n\nexport default function CreateCourse(){\n\n    const[newCourse, setNewCourse] = useState({\n        courseName: \"\",\n        date: \"\",\n        time: \"\",\n        venue: \"\",\n        quota: 0,\n        tutor: \"\",\n        description: \"\"\n\n    })\n\n    const[isCreated, setIsCreated] = useState(false);\n\n    function handleChange(event){\n\n        const {name, value} = event.target;\n\n        setNewCourse(prevValue => {\n            return{\n                ...prevValue,\n                [name]: value\n            }\n        });\n\n    }\n\n    function handleCreate(event){\n        event.preventDefault();\n        \n        const url = '/createcourse';\n        const options = {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: qs.stringify(newCourse)\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res){\n                alert(\"成功新增課程\");\n                setIsCreated(true);\n            }\n        })\n\n    }\n\n    return (\n        <React.Fragment>\n        <Navigator />\n        <h1 className=\"createCourseTitle\">新增課程</h1>\n\n        <Form onSubmit={handleCreate}>\n\n            <div className=\"inputForm\">\n                <div className=\"inputRow\">\n                    <Form.Group className=\"inputItem\">\n                        <Form.Label className=\"inputLabel\">課程名稱:</Form.Label>\n                        <Form.Control placeholder=\"請輸入課程名稱\" className=\"input\" name=\"courseName\" type=\"text\" onChange={handleChange} value={newCourse.cousreName}></Form.Control>\n                    </Form.Group>\n                    <div className=\"inputItem\"></div>\n                    <Form.Group className=\"inputItem\">\n                        <Form.Label className=\"inputLabel\">上課日期:</Form.Label>\n                        <Form.Control placeholder=\"請輸入上課日期\" className=\"input\" name=\"date\" type=\"date\" onChange={handleChange} value={newCourse.date}></Form.Control>\n                    </Form.Group>\n                </div>\n\n                \n                    <div className=\"inputRow\">\n                        <Form.Group className=\"inputItem\">\n                            <Form.Label className=\"inputLabel\">上課時間:</Form.Label>\n                            <Form.Control placeholder=\"請輸入上課時間\" className=\"input\" name=\"time\" type=\"time\" onChange={handleChange} value={newCourse.time}></Form.Control>\n                        </Form.Group>\n                        <div className=\"inputItem\"></div>\n                        <Form.Group className=\"inputItem\">\n                            <Form.Label className=\"inputLabel\">上課地點:</Form.Label>\n                            <Form.Control placeholder=\"請輸入上課地點\" className=\"input\" name=\"venue\" type=\"text\" onChange={handleChange} value={newCourse.venue}></Form.Control>\n                        </Form.Group>\n                    </div>\n\n                    <div className=\"inputRow\">\n                        <Form.Group className=\"inputItem\">\n                            <Form.Label className=\"inputLabel\">課程名額:</Form.Label>\n                            <Form.Control placeholder=\"請輸入課程名額\" className=\"input\" name=\"quota\" type=\"number\" onChange={handleChange} value={newCourse.quota}></Form.Control>\n                        </Form.Group>\n                        <div className=\"inputItem\"></div>\n                        <Form.Group className=\"inputItem\">\n                            <Form.Label className=\"inputLabel\">課程導師:</Form.Label>\n                            <Form.Control placeholder=\"請輸入課程導師\" className=\"input\" name=\"tutor\" type=\"text\" onChange={handleChange} value={newCourse.tutor}></Form.Control>\n                        </Form.Group>\n                    </div>\n                    <div className=\"inputRow\">\n                        <Form.Group className=\"inputItem\">\n                            <Form.Label className=\"inputLabel courseDescriptionText\">課程簡介:</Form.Label>\n                            <FormControl as=\"textarea\" aria-label=\"With textarea\" rows=\"4\" name=\"description\" onChange={handleChange} value={newCourse.description}/>\n                        </Form.Group>\n                    </div>\n                <Button variant=\"primary\" size=\"lg\" className=\"createBtn\" type=\"submit\">新增課程</Button>\n\n                { isCreated && <Redirect to=\"/admin\"/> }\n            \n            </div>\n\n        </Form>\n    </React.Fragment>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport Navigator from './Navigator';\nimport CourseDetail from './CourseDetail';\nimport Nav from \"react-bootstrap/Nav\";\n\nexport default function History(){\n\n    const initialCourse = [{\n        _id: \"\",\n        couseName: \"\",\n        date: \"\",\n        time: \"\",\n        venue: \"\",\n        quota: 0,\n        tutor: \"\",\n        description: \"\"\n    }];\n\n    const[courses, setCourses] = useState(initialCourse);\n    const [selectedID, setSelectedID] = useState(\"\");\n    const [courseToParse, setCourseToParse] = useState(initialCourse[0]);\n\n    useEffect(() => {\n\n        const url = '/adminPastCourse';\n        const options = {\n            method: 'GET',\n            headers: {\n              'Accept': 'application/json',\n            },\n        };\n\n        fetch(url, options)\n        .then(res => res.json())\n        .then(res => {\n            if(courses === initialCourse){\n                setCourses(res);\n            }\n        })\n\n        setCourseToParse(courses.find(course => course._id === selectedID));\n    })\n\n    return (\n        <div>\n\n        <Navigator />\n\n        <div className=\"sidebar\">\n\n            <h4 className=\"sidebarTitle\">以往課程</h4>\n\n                <Nav defaultActiveKey=\"\" className=\"flex-column\" onSelect={(selectedKey) => setSelectedID(selectedKey)}>\n\n                    {courses.map(course => {\n                        const date = new Date(course.date);\n                        return <Nav.Link eventKey={course._id} className=\"courseLink\">{course.courseName} {date.toLocaleDateString()}</Nav.Link>\n                    })}\n                \n                    {courses.length === 0 && <p className=\"noCourse\">沒有過往課程</p>}\n                </Nav>\n\n        </div>\n\n        { selectedID && <CourseDetail selectedCourse={courseToParse}/> }\n\n    );\n\n    </div>\n    );\n\n}","import React, { useState, useEffect } from 'react';\nimport Navigator from './Navigator';\nimport CourseDetail from './CourseDetail';\nimport Nav from \"react-bootstrap/Nav\";\n\nexport default function Future(){\n\n    const initialCourse = [{\n        _id: \"\",\n        couseName: \"\",\n        date: \"\",\n        time: \"\",\n        venue: \"\",\n        quota: 0,\n        tutor: \"\",\n        description: \"\"\n    }];\n\n    const[courses, setCourses] = useState(initialCourse);\n    const [selectedID, setSelectedID] = useState(\"\");\n    const [courseToParse, setCourseToParse] = useState(initialCourse[0]);\n\n    useEffect(() => {\n\n        const url = '/adminFutureCourse';\n        const options = {\n            method: 'GET',\n            headers: {\n              'Accept': 'application/json',\n            },\n        };\n\n        fetch(url, options)\n        .then(res => res.json())\n        .then(res => {\n            if(courses === initialCourse){\n                \n                setCourses(res);\n            }\n        })\n\n        setCourseToParse(courses.find(course => course._id === selectedID));\n    })\n\n    return (\n        <div>\n\n        <Navigator />\n\n        <div className=\"sidebar\">\n\n            <h4 className=\"sidebarTitle\">未來課程</h4>\n\n                <Nav defaultActiveKey=\"\" className=\"flex-column\" onSelect={(selectedKey) => setSelectedID(selectedKey)}>\n\n                    {courses.map(course => {\n                        const date = new Date(course.date);\n                        return <Nav.Link eventKey={course._id} className=\"courseLink\">{course.courseName} {date.toLocaleDateString()}</Nav.Link>\n                    })}\n\n                    {courses.length === 0 && <p className=\"noCourse\">沒有未來課程</p>}\n                \n                </Nav>\n\n        </div>\n\n        { selectedID && <CourseDetail selectedCourse={courseToParse}/> }\n\n    );\n\n    </div>\n    );\n\n}","import React, {useState, useEffect} from 'react';\nimport RegisterRecordDetail from './RegisterRecordDetail';\nimport Card from 'react-bootstrap/Card';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport qs from 'qs';\n\nexport default function RegisterWaitinglistRecord(props){\n\n    const [loaded, setLoaded] = useState(false);\n    const [details, setDetails] = useState();\n    const [courseID, setCourseID] = useState(\"\");\n    const [noResult, setNoResult] = useState();\n    const [isBack, setIsBack] = useState(false);\n\n    useEffect(() => {\n\n        if(!loaded || courseID !== props.selectedCourse._id){\n\n            setCourseID(props.selectedCourse._id);\n\n            const url = '/register-record-waitinglist';\n            const options = {\n                method: 'POST',\n                headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: qs.stringify({\n                    courseID: props.selectedCourse._id,\n                    username: localStorage.getItem(\"username\")\n                })\n            };\n\n            fetch(url, options)\n            .then(res => {\n                if(res.status !== 403){\n                    return res.json();\n                }else{\n                    return \"error\";\n                }\n            })\n            .then(res => {\n                \n                if(res !== \"error\"){\n                    setNoResult(false);\n                    setDetails(res);\n                }else{\n                    setNoResult(true);\n                    setDetails();\n                }\n            })\n\n            setLoaded(true);\n        }\n    })\n\n    function handleClick(){\n        setIsBack(true);\n    }\n\n    if(isBack){\n        return <RegisterRecordDetail selectedCourse={props.selectedCourse}/>\n    }\n\n    return (\n\n        <React.Fragment>\n\n                <Card className=\"detailCard\">\n                    <Card.Header className=\"cardDetailWrapper\">\n                        <Button className=\"backBtn\" onClick={handleClick}>返回查看報名紀錄</Button>\n                        <h1 className=\"courseTitle\">{props.selectedCourse && props.selectedCourse.courseName}</h1>\n                    </Card.Header>\n                    <Card.Body>\n                    {noResult && <p>你並沒有此課程的後補報名紀錄</p>}\n                    <Table striped bordered hover>\n                        <thead>\n                          <tr>\n                            <th>職員編號</th>\n                            <th>姓名</th>\n                            <th>電郵</th>\n                            <th>單位</th>\n                            <th>職位</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                            {details && details.map(detail => {\n                                return <tr>\n                                    <td>{detail.staffid}</td>\n                                    <td>{detail.username}</td>\n                                    <td>{detail.email}</td>\n                                    <td>{detail.dept}</td>\n                                    <td>{detail.post}</td>\n                                </tr>\n                            })}\n                        </tbody>\n                    </Table>\n              </Card.Body>\n            </Card>\n                        \n        </React.Fragment>\n\n    );\n\n\n}","import React, { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card'\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport RegisterWaitinglistRecord from './RegisterWaitinglistRecord';\nimport qs from 'qs';\n\nexport default function RegisterRecordDetail(props){\n\n    const [courseID, setCourseID] = useState(\"\");\n    const [details, setDetails] = useState();\n    const [noResult, setNoResult] = useState();\n    const [loaded, setLoaded] = useState(false);\n    const [waitingList, setWaitingList] = useState(false);\n\n    useEffect(() => {\n\n        if(!loaded || courseID !== props.selectedCourse._id){\n\n            setCourseID(props.selectedCourse._id);\n\n            const url = '/register-record';\n            const options = {\n                method: 'POST',\n                headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: qs.stringify({\n                    courseID: props.selectedCourse._id,\n                    username: localStorage.getItem(\"username\")\n                })\n            };\n\n            fetch(url, options)\n            .then(res => {\n                if(res.status !== 403){\n                    return res.json();\n                }else{\n                    return \"error\";\n                }\n            })\n            .then(res => {\n                \n                if(res !== \"error\"){\n                    setNoResult(false);\n                    setDetails(res);\n                }else{\n                    setNoResult(true);\n                    setDetails();\n                }\n            })\n\n            setLoaded(true);\n        }\n    })\n\n    function handleClick(){\n        setWaitingList(true);\n    }\n\n    if(waitingList){\n        return <RegisterWaitinglistRecord selectedCourse={props.selectedCourse}/>\n    }\n\n    return(\n\n        <React.Fragment>\n\n            <Card className=\"detailCard\">\n                <Card.Header className=\"cardDetailWrapper\">\n                    <h1 className=\"courseTitle\">{props.selectedCourse && props.selectedCourse.courseName}</h1>\n                    <Button className=\"waitinglistBtn\" onClick={handleClick}>查看後補名單</Button>\n                </Card.Header>\n                <Card.Body>\n                {noResult && <p>你並沒有此課程的報名紀錄</p>}\n                <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>職員編號</th>\n                        <th>姓名</th>\n                        <th>電郵</th>\n                        <th>單位</th>\n                        <th>職位</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                        {details && details.map(detail => {\n                            return <tr>\n                                <td>{detail.staffid}</td>\n                                <td>{detail.username}</td>\n                                <td>{detail.email}</td>\n                                <td>{detail.dept}</td>\n                                <td>{detail.post}</td>\n                            </tr>\n                        })}\n                    </tbody>\n                </Table>\n          </Card.Body>\n        </Card>\n            \n    </React.Fragment>\n\n    );\n\n}","import React, {useState, useEffect} from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport RegisterRecordDetail from './RegisterRecordDetail';\nimport qs from 'qs';\n\nexport default function RegisterRecord(){\n\n    const initialCourse = [{\n        _id: \"\",\n        couseName: \"\",\n        date: \"\",\n        time: \"\",\n        venue: \"\",\n        quota: 0,\n        tutor: \"\",\n        description: \"\"\n    }];\n\n    const[courses, setCourses] = useState(initialCourse);\n    const [selectedID, setSelectedID] = useState();\n    const [period, setPeriod] = useState(\"今天\");\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [noCourse, setNoCourse] = useState(false);\n\n    useEffect(() => {\n\n        if(!isLoaded){\n            const url = '/course-by-date';\n            const options = {\n                method: 'POST',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: qs.stringify({\n                    period: period\n                })\n            };\n\n            fetch(url, options)\n            .then(res => res.json())\n            .then(res => {\n                if(res.length === 0){\n                    setNoCourse(true);\n                    setCourses(initialCourse);\n                }else{\n                    if(res !== courses){\n                        setCourses(res);\n                    }\n                    setNoCourse(false);\n                }\n            })\n            setIsLoaded(true);\n        }\n    })\n\n    function handleClick(selectedKey){\n        switch(selectedKey){\n            case \"0\":\n                setPeriod(\"過往\");\n                setIsLoaded(false);\n                setSelectedID();\n                break;\n            case \"1\":\n                setPeriod(\"今天\");\n                setIsLoaded(false);\n                setSelectedID();\n                break;\n            case \"2\":\n                setPeriod(\"未來\");\n                setIsLoaded(false);\n                setSelectedID();\n                break;\n            default:\n                break;\n        }\n        \n    }\n\n    function handleSidebarClick(selectedKey){\n        setSelectedID(selectedKey);\n    }\n\n    return(\n        <React.Fragment>\n        <Navbar bg=\"primary\" variant=\"dark\">\n            <Navbar.Brand href=\"/\">靈實員工培訓課程報名系統</Navbar.Brand>\n            <Nav className=\"mr-auto\" defaultActiveKey=\"\" onSelect={(selectedKey) => handleClick(selectedKey)}>\n                <Nav.Link eventKey=\"0\" >過往課程</Nav.Link>\n                <Nav.Link eventKey=\"1\" >今天課程</Nav.Link>\n                <Nav.Link eventKey=\"2\" >末來課程</Nav.Link>\n            </Nav>\n        </Navbar>\n        <div className=\"sidebar\">\n\n            <h4 className=\"sidebarTitle\">{period}課程</h4>\n            { noCourse && <p className=\"noCourse\">暫沒有課程</p> }\n            <Nav defaultActiveKey=\"\" className=\"flex-column\" onSelect={(selectedKey) => handleSidebarClick(selectedKey)}>\n                {!noCourse && courses.map(course => {\n                    const date = new Date(course.date);\n                    return <Nav.Link eventKey={course._id} className=\"courseLink\">{course.courseName} {date.toLocaleDateString()}</Nav.Link>\n                })}\n            </Nav>\n\n        </div>\n        \n        {selectedID && <RegisterRecordDetail selectedCourse={courses.find(course => course._id === selectedID)} />}\n\n        </React.Fragment>\n    );\n\n}","import React, {useState, useEffect} from 'react';\nimport Navigator from './Navigator';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport qs from 'qs';\n\nexport default function AuthorizedList() {\n\n    const [username, setUsername] = useState(\"\");\n    const [list, setList] = useState([]);\n    const [isObtained, setIsObtained] = useState(false);\n    const [isClicked, setisClicked] = useState({\n        clicked: false,\n        email: \"\"\n    });\n\n    useEffect(() => {\n        if(!isObtained){\n            const getURL = \"/get-authorized-list\";\n            const getOptions = {\n                method: \"GET\",\n                headers: {\n                  \"Accept\": \"application/json\",\n                }\n            };\n\n            fetch(getURL, getOptions)\n            .then(res => {\n                if(res.status === 200){\n                    return res.json();\n                }else{\n                    return \"error\";\n                }\n            })\n            .then(res => {\n                if(res !== \"error\"){\n                    console.log(res);\n                    setList(res);\n                    setIsObtained(true);\n                } \n            }).catch(error => {\n                console.log(error);\n            });\n        }\n\n        if(isClicked.clicked){\n\n            const url = \"/delete-authorized-list\";\n            const options = {\n                method: \"POST\",\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/x-www-form-urlencoded\"\n                },\n                body: qs.stringify({\n                    \"email\": isClicked.email\n                })\n            };\n\n            console.log(options.body);\n\n            fetch(url, options)\n            .then(res => {\n                if(res.status === 200){\n                    alert(\"成功從授權名單中移除此電郵\");\n                    setisClicked(false);\n                    setIsObtained(false);\n                }else{\n                    alert(\"未能從授權名單中移除此電郵\");\n                }\n            })\n\n        }\n\n    })\n\n\n    function handleChange(event){\n\n        const {value} = event.target;\n        \n        setUsername(value);\n    }\n\n    function handleSubmit(event){\n\n        event.preventDefault();\n\n        const url = \"/add-authorized-list\";\n        const options = {\n            method: \"POST\",\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: qs.stringify({\n                \"email\": username+\"@hohcs.org.hk\"\n            })\n        };\n\n        fetch(url, options)\n        .then(res => {\n            if(res.status === 200){\n                alert(\"成功新增授權電郵\");\n                setUsername(\"\");\n                setIsObtained(false);\n\n            }else{\n                alert(\"發生錯誤，請稍後再嘗試\");\n            }\n        });\n\n    }\n\n    return (\n\n        <React.Fragment>\n\n            <Navigator />\n            <Card className=\"authorizedCard\">\n\n                <Card.Header className=\"cardDetailWrapper\"><h1 className=\"authorizedTitle\">授權名單</h1></Card.Header>\n                <Card.Body>\n                    <Form className=\"authorizedForm\" onSubmit={handleSubmit}>\n                    <InputGroup>\n                        <Form.Control type=\"text\" className=\"input\" placeholder=\"輸入電郵\" name=\"username\" onChange={handleChange} value={username}></Form.Control>\n                        <InputGroup.Append>\n                            <InputGroup.Text>@hohsc.org.hk</InputGroup.Text>\n                        </InputGroup.Append>\n                        <InputGroup.Append>\n                            <Button className=\"addBtn\" type=\"submit\">+</Button>\n                        </InputGroup.Append>\n                    </InputGroup>\n                    </Form>\n                    <Table className=\"authorizedTable\">\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>己授權名單</th>\n                            </tr>\n                        </thead>\n                        {list && list.map((item, index) => {\n                            return (\n                                <tr>\n                                    <td>{index+1}</td>\n                                    <td>{item.email}</td>\n                                    <td><Button className=\"authorizedDeleteBtn\" variant=\"danger\" onClick={() => setisClicked({\n                                        clicked: true,\n                                        email: item.email})}>移除</Button></td>\n                                </tr>\n                            )\n                        })}\n                    </Table>\n                </Card.Body>\n\n            </Card>\n        </React.Fragment>\n\n    )\n\n}","import React, {useEffect} from \"react\";\nimport ApplicationForm from \"./ApplicationForm\";\nimport Register from \"./Register\";\nimport { ProtectedRoute } from \"./protected-route\";\nimport { AdminRoute } from \"./admin-route\";\nimport Login from \"./Login\";\nimport Admin from \"./Adminastrative/Admin\";\nimport CreateCourse from \"./Adminastrative/CreateCourse\";\nimport History from \"./Adminastrative/History\";\nimport Future from \"./Adminastrative/Future\";\nimport RegisterRecord from \"./RegisterRecord\";\nimport axios from 'axios';\n\nimport { BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport AuthorizedList from \"./Adminastrative/AuthorizedList\";\n\n\nexport default function App(props) {\n\n    \n\n    useEffect(() => {\n        axios.get(\"/isAuthenticated\",  \n        { headers:\n            { \n                \"Content-Type\" : \"Application/json\",\n                'Accept': 'application/json',\n                \"Authorization\": `Bearer ${localStorage.getItem('userToken')}`\n            }\n        })\n        .then(res => {\n            localStorage.setItem(\"isAuthorized\", true);\n        }).catch(function (error) {\n            localStorage.removeItem(\"isAuthorized\");\n        });\n    })\n\n    \n    return(\n    <Router>\n        <Switch>\n            <Route component={Login} exact path=\"/login\" />\n            <ProtectedRoute component={ApplicationForm} exact path=\"/\" />\n            <AdminRoute component={Admin} exact path=\"/admin\" />\n            <AdminRoute component={CreateCourse} exact path=\"/createcourse\" />\n            <AdminRoute component={History} exact path=\"/history\" />\n            <AdminRoute component={Future} exact path=\"/future\" />\n            <AdminRoute component={AuthorizedList} exact path=\"/authorized-list\" />\n            <Route component={Register} exact path=\"/register\"/>\n            <Route component={RegisterRecord} exact path=\"/register-record\"/>\n        </Switch>\n    </Router> \n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}